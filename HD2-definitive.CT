<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="46">
  <CheatEntries>
    <CheatEntry>
      <ID>113968</ID>
      <Description>"All Mods"</Description>
      <Options moHideChildren="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>113975</ID>
          <Description>"Inf things"</Description>
          <Options moHideChildren="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>117437</ID>
              <Description>"Inf Health                                                                       (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

aobscanmodule(aobReadLocalPlayerHealth,game.dll,41 8B 47 18 4C 8B 7C 24 20 4C 8B 74 24 28) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(pHealth)
registersymbol(pHealth)
newmem:

code:
  lea rax,[rax+rcx*8]
  mov [pHealth],rax
  mov [rax],#9999
  mov eax,[r15+18]
  mov r15,[rsp+20]
  mov r14,[rsp+28]
  jmp return
pHealth:
dq 0

aobReadLocalPlayerHealth:
  jmp far newmem
return:
registersymbol(aobReadLocalPlayerHealth)



aobscanmodule(aobWriteHealth,game.dll,41 89 2C 00 48 8B 46 38 4C 03 46 50 4A 8B 0C C8) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  push rbx
  push rcx
  mov rbx,pHealth
  mov rbx,[rbx]
  lea rcx,[r8+rax]
  cmp rbx,rcx
  jne short @f
   mov ebp,#9999
  @@:
  pop rcx
  pop rbx
  mov [r8+rax],ebp
  mov rax,[rsi+38]
  add r8,[rsi+50]
  mov rcx,[rax+r9*8]
  jmp return2

aobWriteHealth:
  jmp far newmem2
  nop 2
return2:
registersymbol(aobWriteHealth)

[DISABLE]

aobReadLocalPlayerHealth:
  db 41 8B 47 18 4C 8B 7C 24 20 4C 8B 74 24 28

unregistersymbol(aobReadLocalPlayerHealth)
dealloc(newmem)

aobWriteHealth:
  db 41 89 2C 00 48 8B 46 38 4C 03 46 50 4A 8B 0C C8

unregistersymbol(aobWriteHealth)
dealloc(newmem2)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>14</ID>
              <Description>"Inf Stamina                                                                    (by gir489+cfemen)"</Description>
              <Color>8080FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">[ENABLE]

aobscanmodule(aobSprintWrite,game.dll,F3 41 0F 11 08 48 8B 84 F8) // should be unique

aobSprintWrite:
  nop 5
registersymbol(aobSprintWrite)

[DISABLE]

aobSprintWrite:
  db F3 41 0F 11 08

unregistersymbol(aobSprintWrite)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113868</ID>
              <Description>"Inf last stim                                                                    (by gir489)"</Description>
              <Color>0000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(aob_Syringes,game.dll, 41 8B 54 EE 04 8B C8)
registersymbol(aob_Syringes)
alloc(newmem_Syringes,1024)
label(return_Syringes)

newmem_Syringes:
  mov edx,[r14+rbp*8+4]
  mov ecx,eax
  cmp edx, #1
  je short @f
    dec edx
  @@:
  mov [r14+rbp*8+4],edx
  jmp return_Syringes

aob_Syringes:
  jmp far newmem_Syringes
return_Syringes:

[DISABLE]
aob_Syringes:
  db 41 8B 54 EE 04 8B C8 FF CA 41 89 54 CE 04

unregistersymbol(aob_Syringes)
dealloc(newmem_Syringes)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117438</ID>
              <Description>"Inf stims                                                                         (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

aobscanmodule(aobSyrige,game.dll,41 89 54 CE 04 41 8B 45 08) // should be unique

aobSyrige:
  db 90 90 90 90 90

registersymbol(aobSyrige)

[DISABLE]

aobSyrige:
  db 41 89 54 CE 04

unregistersymbol(aobSyrige)


</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113873</ID>
              <Description>"Inf last grenade                                                              (by gir489)"</Description>
              <Color>0000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(aob_Grenades,game.dll,42 FF 0C E0)
registersymbol(aob_Grenades)
alloc(newmem_Grenades,1024)
label(return_Grenades)

newmem_Grenades:
  cmp [rax+r12*8], #1
  je short @f
    dec [rax+r12*8]
  @@:
  mov rax,[r14+58]
  lea r8,[rax+r12*8]
  mov rax,[r14+40]
  jmp return_Grenades

aob_Grenades:
  jmp far newmem_Grenades
  nop 2
return_Grenades:

[DISABLE]
aob_Grenades:
  db 42 FF 0C E0 49 8B 46 58 4E 8D 04 E0 49 8B 46 40

unregistersymbol(aob_Grenades)
dealloc(newmem_Grenades)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117460</ID>
              <Description>"Inf grenade                                                                    (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]


aobscanmodule(aobNades,game.dll,42 FF 0C E0 49 8B 46 58) // should be unique

aobNades:
  nop 4

registersymbol(aobNades)

[DISABLE]

aobNades:
  db 42 FF 0C E0

unregistersymbol(aobNades)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>43</ID>
              <Description>"Inf Mags                                                                        (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

aobscanmodule(aobAmmo,game.dll,42 83 2C 81 01 48 8B 45 38) // should be unique

aobAmmo:
 db 90 90 90 90 90
registersymbol(aobAmmo)

[DISABLE]

aobAmmo:
  db 42 83 2C 81 01 48 8B 45 38

unregistersymbol(aobAmmo)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117533</ID>
              <Description>"Inf last mag                                                                    (by gir489)"</Description>
              <Color>0000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(aob_SubtractAmmo,game.dll,8B D7 4C 8D 04 52 42 83 2C 81 01 48 8B 45)
registersymbol(aob_SubtractAmmo)
alloc(newmem_SubtractAmmo,1024)
label(return_SubtractAmmo)

newmem_SubtractAmmo:
  mov edx,edi
  lea r8,[rdx+rdx*2]
  cmp [rcx+r8*4], #2
  jle short @f
    sub [rcx+r8*4], #1
  @@:
  mov rax,[rbp+38]
  jmp return_SubtractAmmo

aob_SubtractAmmo:
  jmp far newmem_SubtractAmmo
  nop
return_SubtractAmmo:

[DISABLE]
aob_SubtractAmmo:
  db 8B D7 4C 8D 04 52 42 83 2C 81 01 48 8B 45 38

unregistersymbol(aob_SubtractAmmo)
dealloc(newmem_SubtractAmmo)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>57</ID>
              <Description>"No bullets consume                                                       (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">[ENABLE]

aobscanmodule(aobReload,game.dll,44 89 74 01 04 4D 8B 42 50 49 8B 42 38) // should be unique
registersymbol(aobReload)
aobReload:
  nop 5
[DISABLE]

aobReload:
 db 44 89 74 01 04

unregistersymbol(aobReload)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117441</ID>
              <Description>"No reload                                                                       (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">{ Game   : helldivers2.exe
  Version:
  Date   : 2024-10-31
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(aobReload,game.dll,44 89 74 01 04 4D 8B 42 50 49 8B 42 38) // should be unique
registersymbol(aobReload)
aobReload:
  nop 5


aobscanmodule(aobStaticP,game.dll,48 8B 15 ?? ?? ?? ?? 8B CE 44 8B 8A F0 00 00 00)
registersymbol(aobStaticP)

label(pStaticW)
registersymbol(pStaticW)

aobStaticP+7+(DWORD)[aobStaticP+3]:
pStaticW:

aobscanmodule(aobShoot,game.dll,48 89 4C 24 08 53 55 56 57 41 55 41 56 41 57 48 83 EC 30 4C 8B 2D) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov rax,pStaticW
  mov rax,[rax]
  cmp rcx,rax
  jne short @f
   ret
  @@:
  mov [rsp+08],rcx
  push rbx
  push rbp
  push rsi
  push rdi
  push r13
  push r14
  push r15
  jmp return

aobShoot:
  jmp far newmem
  nop
return:
registersymbol(aobShoot)

[DISABLE]
aobReload:
 db 44 89 74 01 04

aobShoot:
  db 48 89 4C 24 08 53 55 56 57 41 55 41 56 41 57

unregistersymbol(*)
dealloc(newmem)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113970</ID>
              <Description>"Inf Jetpack                                                                      (by ???)"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_ToTheSky,game.dll,89 04 B9 83 FD 01)
registersymbol(aob_ToTheSky)

aob_ToTheSky:
  nop 3

[DISABLE]
aob_ToTheSky:
  db 89 04 B9
unregistersymbol(aob_ToTheSky)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>47</ID>
              <Description>"Inf Shield                                                                        (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : helldivers2.exe
  Version:
  Date   : 2025-05-13
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(aobCalcShield,game.dll,F3 41 0F 5C CE F3 43 0F 11 4C 3E 4C 0F 28 D1) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
test rsi,rsi
  je short @f
  push rax
  mov rax,12C8D71AC3897A5C
  cmp [rsi],rax
  jne short @f
     pop rax
     subss xmm1,xmm1
     movss [r14+r15+4C],xmm1
     movaps xmm2,xmm1
  jmp return
  @@:
  pop rax
  subss xmm1,xmm14
  movss [r14+r15+4C],xmm1
  movaps xmm2,xmm1
  jmp return

aobCalcShield:
  jmp far newmem
  nop
return:
registersymbol(aobCalcShield)

[DISABLE]

aobCalcShield:
  db F3 41 0F 5C CE F3 43 0F 11 4C 3E 4C 0F 28 D1

unregistersymbol(aobCalcShield)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+6C55C3

game.dll+6C5599: 48 8B 43 48           - mov rax,[rbx+48]
game.dll+6C559D: 4C 8B 43 58           - mov r8,[rbx+58]
game.dll+6C55A1: 49 FF C0              - inc r8
game.dll+6C55A4: 4D 03 C4              - add r8,r12
game.dll+6C55A7: 4A 8B 0C 28           - mov rcx,[rax+r13]
game.dll+6C55AB: 8B 49 10              - mov ecx,[rcx+10]
game.dll+6C55AE: E8 DD E1 56 00        - call game.dll+C33790
game.dll+6C55B3: F3 43 0F 10 4C 3E 4C  - movss xmm1,[r14+r15+4C]
game.dll+6C55BA: 0F 2F CF              - comiss xmm1,xmm7
game.dll+6C55BD: 0F 86 F6 00 00 00     - jbe game.dll+6C56B9
// ---------- INJECTING HERE ----------
game.dll+6C55C3: F3 41 0F 5C CE        - subss xmm1,xmm14
// ---------- DONE INJECTING  ----------
game.dll+6C55C8: F3 43 0F 11 4C 3E 4C  - movss [r14+r15+4C],xmm1
game.dll+6C55CF: 0F 28 D1              - movaps xmm2,xmm1
game.dll+6C55D2: 41 80 7C 2C 02 00     - cmp byte ptr [r12+rbp+02],00
game.dll+6C55D8: 74 70                 - je game.dll+6C564A
game.dll+6C55DA: 0F 28 C1              - movaps xmm0,xmm1
game.dll+6C55DD: F3 41 0F 58 C6        - addss xmm0,xmm14
game.dll+6C55E2: 0F 2F C6              - comiss xmm0,xmm6
game.dll+6C55E5: 76 63                 - jna game.dll+6C564A
game.dll+6C55E7: 0F 2F F1              - comiss xmm6,xmm1
game.dll+6C55EA: 72 5E                 - jb game.dll+6C564A
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>28</ID>
              <Description>"Inf Stratagems                                                                (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">{ Game   : helldivers2.exe
  Version:
  Date   : 2024-03-21
  Author : cfe

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(aobStratacmp,game.dll,0F 86 B1 01 00 00 0F) // should be unique

aobStratacmp:
  db 90 E9
registersymbol(aobStratacmp)

[DISABLE]

aobStratacmp:
  db 0F 86

unregistersymbol(aobStratacmp)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>50</ID>
              <Description>"Inf Time                                                                          (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : helldivers2.exe
  Version:
  Date   : 2024-12-13
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(aobSubTime,game.dll,F3 0F 5C C7 F3 41 0F 5F C7) // should be unique

aobSubTime:
  nop 4

registersymbol(aobSubTime)

[DISABLE]

aobSubTime:
  db F3 0F 5C C7

unregistersymbol(aobSubTime)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113865</ID>
              <Description>"Infinite Autocannon Backpack                                        (by ???)"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_Autocannon,game.dll,2B C8 BA)
registersymbol(aob_Autocannon)
aob_Autocannon:
nop 2
[DISABLE]
aob_Autocannon:
  db 2B C8
unregistersymbol(aob_Autocannon)
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>52</ID>
          <Description>"Climb All                                                                             (by sakuno)"</Description>
          <Color>C080FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.xxx
  Date   : 2024-08-25
  Author : (Discord)Sakuno

  This little script allow you to climb up anything can climb.
}
{$lua}
AvatarDataReplacer=decodeFunction('c-n1^!AiqG5QhJ4m$,8MLPb!a=4guigvffyZ8sZw5/CR#QBo61p;1HBs:ciU=F0Bic^DdkMFodp[-6i{Wp:LbH%W{k()qFThce38,arEr@ePEj4vy:#ec[5HC6oo.OJHCvVSx1??dSl[,3:B6.J]:UX,v0erE,QuJE!esNCwi9,Gj(JM((tiZ]1Bfy)C3qB3D$J8p[l_7)XYg@GTq15b$xp#h43GWhg3c:C{3S[Ydh/M[g-ur?4rJ?n4Vc*Ar2-*YJK9RrJW:,w^z2v-!HnOuSuA@9AiTTj_AoIjz;{eIJOjG,P%Y-xB.6U,twn=f')
AvatarDataReplacer()
{$asm}
// X
AvatarClimbAddr:
  dd (float)50.0 // Default 1.95

// Y
AvatarClimbAddr+4:
  dd (float)50.0 // Default 1.40

[DISABLE]
// X
AvatarClimbAddr:
  dd (float)1.95

// Y
AvatarClimbAddr+4:
  dd (float)1.40

unregistersymbol(AvatarClimbAddr)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>117455</ID>
          <Description>"No Recoil                                                                            (by cfemen)"</Description>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(aobRecoil,game.dll,48 83 EC 18 48 8B 01) // should be unique

aobRecoil:
  db C3
registersymbol(aobRecoil)

[DISABLE]

aobRecoil:
  db 48
unregistersymbol(aobRecoil)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>53</ID>
          <Description>"No Sway                                                                             (by cfemen)"</Description>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : helldivers2.exe
  Version:
  Date   : 2024-12-13
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(aobCalcSway,game.dll,F3 0F 51 C2 EB ? 0F 28 C2 E8 ? ? ? ? F3 44 0F 59 C8) // should be unique

aobCalcSway:
  nop 4

[DISABLE]

aobCalcSway:
  db F3 0F 51 C2

unregistersymbol(aobCalcSway)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>204</ID>
          <Description>"Bunker hack                                                                        (by cfemen)"</Description>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : helldivers2.exe
  Version:
  Date   : 2025-05-13
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(AOB_BunkerNew,game.dll,41 B8 01 00 00 00 4C 8B 11 8B CA 49 D3 E0 44) // should be unique

AOB_BunkerNew+2:
  db 03

registersymbol(AOB_BunkerNew)

[DISABLE]

AOB_BunkerNew+2:
  db 01
unregistersymbol(AOB_BunkerNew)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113878</ID>
          <Description>"Show All Map Icons                                                            (by cfemen)"</Description>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.27207.0
// MD5 Signature     : 14C848EF74B1A8FEF0AC3DB6E396B3D2
// EXE Compile Date  : January 28, 2025 10:15 AM
// Script Date       : February 04, 2025 06:37 PM
[ENABLE]
aobscanmodule(aob_CheckIsBlipSeen,game.dll,44 0F B6 68 ? F3 0F 59 C2)
aobscanmodule(aob_CheckIfAlienHivesAreObstructed,game.dll,41 80 BC 24 ? ? ? ? ? F2 44 0F 11 65)
aobscanmodule(aob_CheckIfAlienHiveSeen,game.dll, 0F 84 ? ? ? ? 83 7C 24 ? ? 0F 83)
aobscanmodule(aob_CheckIfAlienHiveVisible,game.dll, 75 ? 41 80 BF ? ? ? ? ? 0F 85)
aobscanmodule(aob_CheckIfMinorInterestBlipIsDiscovered,game.dll, 0F 85 ? ? ? ? 48 8B 44 24 ? 80 78)
//aobscanmodule(aob_GetMinorInterestBlipIcon,game.dll, 0F 84 ? ? ? ? 48 8B 54 24 ? F3 42 0F 10 4C EB)
aobscanmodule(aob_CheckMissionBlip,game.dll,0F 85 ? ? ? ? 48 8D BE ? ? ? ? 41 0F 28 CE)
registersymbol(aob_CheckIsBlipSeen)
registersymbol(aob_CheckIfAlienHivesAreObstructed)
registersymbol(aob_CheckIfAlienHiveSeen)
registersymbol(aob_CheckIfMinorInterestBlipIsDiscovered)
registersymbol(aob_CheckMissionBlip)


aob_CheckIsBlipSeen:
  mov r13w,1

aob_CheckIfAlienHiveSeen:
  db 0F 87

aob_CheckIfMinorInterestBlipIsDiscovered:
  db 90 E9

aob_CheckIfAlienHivesAreObstructed+8:
  db 02

aob_CheckIfAlienHiveVisible:
  db EB

aob_CheckMissionBlip:
  db 90 E9

[DISABLE]
aob_CheckIsBlipSeen:
 db 44 0F B6 68 33

aob_CheckIfAlienHiveSeen:
  db 0F 84

aob_CheckIfMinorInterestBlipIsDiscovered:
  db 0F 85

aob_CheckIfAlienHivesAreObstructed+8:
  db 00

aob_CheckIfAlienHiveVisible:
  db 75

aob_CheckMissionBlip:
  db 0F 85

unregistersymbol(aob_CheckMissionBlip)
unregistersymbol(aob_CheckIsBlipSeen)
unregistersymbol(aob_CheckIfAlienHivesAreObstructed)
unregistersymbol(aob_CheckIfAlienHiveSeen)
unregistersymbol(aob_CheckIfAlienHiveVisible)
unregistersymbol(aob_CheckIfMinorInterestBlipIsDiscovered)
unregistersymbol(aob_CheckMissionBlip)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113959</ID>
          <Description>"instant complete all missions                                             (by cfemen)"</Description>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]

aobscanmodule(aobInsta1,game.dll,45 8B 4A 18 48 8D 8D 48 01 00 00 41 8B D4) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [r10+18],1
  mov r9d,[r10+18]
  lea rcx,[rbp+00000148]
  mov edx,r12d
  jmp return

aobInsta1:
  jmp far newmem
return:
registersymbol(aobInsta1)

aobscanmodule(aobInsta2,game.dll,8B 46 20 83 E8 02 83 F8 01 41 8B 85 14 08 00 00) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  mov [rsi+20],2
  mov eax,[rsi+20]
  sub eax,02
  cmp eax,01
  mov eax,[r13+00000814]
  jmp return2

aobInsta2:
  jmp far newmem2
  nop 2
return2:
registersymbol(aobInsta2)

[DISABLE]

aobInsta1:
  db 45 8B 4A 18 48 8D 8D 48 01 00 00 41 8B D4

unregistersymbol(aobInsta1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+5DF5BC

game.dll+5DF59B: 44 03 F0              - add r14d,eax
game.dll+5DF59E: FF C3                 - inc ebx
game.dll+5DF5A0: 3B 5E 0C              - cmp ebx,[rsi+0C]
game.dll+5DF5A3: 72 BB                 - jb game.dll+5DF560
game.dll+5DF5A5: 4C 8B 54 24 68        - mov r10,[rsp+68]
game.dll+5DF5AA: 44 38 A5 CC 09 00 00  - cmp [rbp+000009CC],r12b
game.dll+5DF5B1: 74 09                 - je game.dll+5DF5BC
game.dll+5DF5B3: 45 38 62 30           - cmp [r10+30],r12b
game.dll+5DF5B7: 75 03                 - jne game.dll+5DF5BC
game.dll+5DF5B9: 41 FF C6              - inc r14d
// ---------- INJECTING HERE ----------
game.dll+5DF5BC: 45 8B 4A 18           - mov r9d,[r10+18]
// ---------- DONE INJECTING  ----------
game.dll+5DF5C0: 48 8D 8D 48 01 00 00  - lea rcx,[rbp+00000148]
game.dll+5DF5C7: 41 8B D4              - mov edx,r12d
game.dll+5DF5CA: 66 0F 1F 44 00 00     - nop word ptr [rax+rax+00]
game.dll+5DF5D0: 41 3B D1              - cmp edx,r9d
game.dll+5DF5D3: 73 34                 - jae game.dll+5DF609
game.dll+5DF5D5: 44 8B 81 F8 FE FF FF  - mov r8d,[rcx-00000108]
game.dll+5DF5DC: 45 85 C0              - test r8d,r8d
game.dll+5DF5DF: 74 28                 - je game.dll+5DF609
game.dll+5DF5E1: 41 8D 40 FD           - lea eax,[r8-03]
game.dll+5DF5E5: 83 F8 02              - cmp eax,02
}
aobInsta2:
  db 8B 46 20 83 E8 02 83 F8 01 41 8B 85 14 08 00 00

unregistersymbol(aobInsta2)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+5DF122

game.dll+5DF0F5: 48 8D 54 24 70        - lea rdx,[rsp+70]
game.dll+5DF0FA: 4D 69 E8 60 08 00 00  - imul r13,r8,00000860
game.dll+5DF101: 49 6B F0 54           - imul rsi,r8,54
game.dll+5DF105: 4D 03 6A 60           - add r13,[r10+60]
game.dll+5DF109: 44 8B C7              - mov r8d,edi
game.dll+5DF10C: 49 8B CA              - mov rcx,r10
game.dll+5DF10F: 4C 89 6C 24 40        - mov [rsp+40],r13
game.dll+5DF114: 49 03 72 68           - add rsi,[r10+68]
game.dll+5DF118: 48 89 74 24 68        - mov [rsp+68],rsi
game.dll+5DF11D: E8 0E 18 00 00        - call game.dll+5E0930
// ---------- INJECTING HERE ----------
game.dll+5DF122: 8B 46 20              - mov eax,[rsi+20]
// ---------- DONE INJECTING  ----------
game.dll+5DF125: 83 E8 02              - sub eax,02
game.dll+5DF128: 83 F8 01              - cmp eax,01
game.dll+5DF12B: 41 8B 85 14 08 00 00  - mov eax,[r13+00000814]
game.dll+5DF132: 76 16                 - jna game.dll+5DF14A
game.dll+5DF134: 8B 56 18              - mov edx,[rsi+18]
game.dll+5DF137: 45 32 FF              - xor r15b,r15b
game.dll+5DF13A: 89 54 24 30           - mov [rsp+30],edx
game.dll+5DF13E: EB 14                 - jmp game.dll+5DF154
game.dll+5DF140: 3B C7                 - cmp eax,edi
game.dll+5DF142: 75 AC                 - jne game.dll+5DF0F0
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>59</ID>
          <Description>"Instant Shuttle                                                                     (by cfemen)"</Description>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : helldivers2.exe
  Version:
  Date   : 2025-09-02
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(aobSubTimer,game.dll,F3 0F 5C C3 BA 66 F7 09 61 F3 0F 11 04 01) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
  ucomiss xmm0, DWORD [compare_float_check]
  jbe short @f
    movss xmm0, DWORD [compare_float_check]
  @@:
code:
  subss xmm0,xmm3
  mov edx,6109F766
  movss [rcx+rax],xmm0
  jmp return
compare_float_check:
dd (float)1.0

aobSubTimer:
  jmp far newmem
return:
registersymbol(aobSubTimer)

[DISABLE]

aobSubTimer:
  db F3 0F 5C C3 BA 66 F7 09 61 F3 0F 11 04 01

unregistersymbol(aobSubTimer)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+687E82

game.dll+687E66: 32 DB           - xor bl,bl
game.dll+687E68: FF C1           - inc ecx
game.dll+687E6A: 48 83 C2 1C     - add rdx,1C
game.dll+687E6E: 41 3B C8        - cmp ecx,r8d
game.dll+687E71: 72 DD           - jb game.dll+687E50
game.dll+687E73: 84 DB           - test bl,bl
game.dll+687E75: 75 35           - jne game.dll+687EAC
game.dll+687E77: 48 8B 47 78     - mov rax,[rdi+78]
game.dll+687E7B: 0F 28 C6        - movaps xmm0,xmm6
game.dll+687E7E: 49 6B CF 3C     - imul rcx,r15,3C
// ---------- INJECTING HERE ----------
game.dll+687E82: F3 0F 5C C3     - subss xmm0,xmm3
// ---------- DONE INJECTING  ----------
game.dll+687E86: BA 66 F7 09 61  - mov edx,6109F766
game.dll+687E8B: F3 0F 11 04 01  - movss [rcx+rax],xmm0
game.dll+687E90: 48 8B 47 60     - mov rax,[rdi+60]
game.dll+687E94: 4C 8B 47 78     - mov r8,[rdi+78]
game.dll+687E98: 4C 03 C1        - add r8,rcx
game.dll+687E9B: 4A 8B 0C F8     - mov rcx,[rax+r15*8]
game.dll+687E9F: 8B 49 10        - mov ecx,[rcx+10]
game.dll+687EA2: E8 A9 1B 62 00  - call game.dll+CA9A50
game.dll+687EA7: 49 8B D7        - mov rdx,r15
game.dll+687EAA: EB 44           - jmp game.dll+687EF0
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>117524</ID>
          <Description>"Speedhack                                                                           (by cfemen)"</Description>
          <Options moHideChildren="1"/>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">{ Game   : helldivers2.exe
  Version:
  Date   : 2025-05-13
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(AOB_Speed,game.dll,F3 0F 59 4B 78 F3 0F 59 4B 7C 0F 28 D9 F3 0F 5C DC) // should be unique
alloc(newmem,$1000)
alloc(fSpeed,4)
registersymbol(fSpeed)

fSpeed:
db (float)1.25

label(code)
label(return)
label(bFreeze)
registersymbol(bFreeze)
newmem:

code:
  push rcx
  lea rcx,[rsi+70]
  cmp rbx,rcx // TransformArray[0] ?
  je Player
  mov rcx,712947D6712947D6 // Ship
  cmp [r15],rcx
  je Player
  jmp Enemy
Player:
    mov rcx,fSpeed
    mulss xmm1,[rcx]
    mulss xmm1,[rbx+78]
    mulss xmm1,[rbx+7C]
    movaps xmm3,xmm1
    subss xmm3,xmm4
    pop rcx
    jmp return
Enemy:
  pop rcx
  cmp byte ptr[bFreeze],1
  jne short @f
   xorps xmm1,xmm1
  @@:
  mulss xmm1,[rbx+78]
  mulss xmm1,[rbx+7C]
  movaps xmm3,xmm1
  subss xmm3,xmm4
  jmp return
bFreeze:
db 0

AOB_Speed:
  jmp far newmem
  nop 3
return:
registersymbol(AOB_Speed)

[DISABLE]

AOB_Speed:
  db F3 0F 59 4B 78 F3 0F 59 4B 7C 0F 28 D9 F3 0F 5C DC

unregistersymbol(AOB_Speed)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+731947

game.dll+731913: 41 0F 28 F1              - movaps xmm6,xmm9
game.dll+731917: F3 0F 5D F0              - minss xmm6,xmm0
game.dll+73191B: EB 06                    - jmp game.dll+731923
game.dll+73191D: F3 0F 10 7C 24 40        - movss xmm7,[rsp+40]
game.dll+731923: F3 0F 10 4B 70           - movss xmm1,[rbx+70]
game.dll+731928: F3 0F 59 4B 6C           - mulss xmm1,[rbx+6C]
game.dll+73192D: F3 0F 10 A3 80 00 00 00  - movss xmm4,[rbx+00000080]
game.dll+731935: F2 0F 10 2D 03 97 CA 00  - movsd xmm5,[game.dll+13DB040]
game.dll+73193D: F3 0F 59 4B 74           - mulss xmm1,[rbx+74]
game.dll+731942: F3 0F 10 53 30           - movss xmm2,[rbx+30]
// ---------- INJECTING HERE ----------
game.dll+731947: F3 0F 59 4B 78           - mulss xmm1,[rbx+78]
// ---------- DONE INJECTING  ----------
game.dll+73194C: F3 0F 59 4B 7C           - mulss xmm1,[rbx+7C]
game.dll+731951: 0F 28 D9                 - movaps xmm3,xmm1
game.dll+731954: F3 0F 5C DC              - subss xmm3,xmm4
game.dll+731958: 0F 5A C3                 - cvtps2pd xmm0,xmm3
game.dll+73195B: 0F 54 05 7E DC CA 00     - andps xmm0,[game.dll+13DF5E0]
game.dll+731962: 66 0F 2F E8              - comisd xmm5,xmm0
game.dll+731966: 77 20                    - ja game.dll+731988
game.dll+731968: F3 0F 59 D7              - mulss xmm2,xmm7
game.dll+73196C: 44 0F 2F E2              - comiss xmm12,xmm2
game.dll+731970: 76 06                    - jna game.dll+731978
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>117525</ID>
              <Description>"Speed:"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>fSpeed</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>113969</ID>
              <Description>"Freeze Non Player Characters"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
bFreeze:
db 1

 
 
[DISABLE]
bFreeze:
db 0

</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>113957</ID>
          <Description>"No Laser Overheat                                                               (by gir489)"</Description>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_ImmaChargingMahLasor,game.dll,F3 0F 11 4C A8)
registersymbol(aob_ImmaChargingMahLasor)

aob_ImmaChargingMahLasor+3:
 db 7C

[DISABLE]
aob_ImmaChargingMahLasor+3:
 db 4C

unregistersymbol(aob_ImmaChargingMahLasor)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>42</ID>
          <Description>"Instant Railgun/Arc Ready(outdated)                                                   (by gir489)"</Description>
          <Color>4080FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.25984.0
// MD5 Signature     : F1A0F5136B9035B653BDE0217332B2C8
// EXE Compile Date  : December 06, 2024 11:43 AM
// Script Date       : December 12, 2024 10:40 PM
[ENABLE]
aobscanmodule(aob_RailgunCharge,game.dll, F3 43 0F 11 44 F7 ? 45 84 E4)
registersymbol(aob_RailgunCharge)
assert(aob_RailgunCharge+3F, 45 0F 2F D9)
alloc(newmem,1024)
label(return)

newmem:
  mov [r15+r14*8+4], (float)2.999999
  movss xmm0, [r15+r14*8+4]
  test r12b,r12b
  je far return+2F
  comiss xmm10,xmm9
  jmp far return

aob_RailgunCharge:
  jmp far newmem
  nop 2
return:

[DISABLE]
aob_RailgunCharge:
  db F3 43 0F 11 44 F7 04 45 84 E4 74 33 45 0F 2F D1

unregistersymbol(aob_RailgunCharge)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+58FDB9

game.dll+58FD6C: 0F 85 53 FF FF FF        - jne game.dll+58FCC5
game.dll+58FD72: 41 8B 44 D2 04           - mov eax,[r10+rdx*8+04]
game.dll+58FD77: 83 F8 FF                 - cmp eax,-01
game.dll+58FD7A: 0F 84 45 FF FF FF        - je game.dll+58FCC5
game.dll+58FD80: 8B C8                    - mov ecx,eax
game.dll+58FD82: 49 8B 43 38              - mov rax,[r11+38]
game.dll+58FD86: 8B 3C 88                 - mov edi,[rax+rcx*4]
game.dll+58FD89: E9 3D FF FF FF           - jmp game.dll+58FCCB
game.dll+58FD8E: 3B C3                    - cmp eax,ebx
game.dll+58FD90: 75 AB                    - jne game.dll+58FD3D
game.dll+58FD92: 41 83 7C D2 04 FF        - cmp dword ptr [r10+rdx*8+04],-01
game.dll+58FD98: 74 A3                    - je game.dll+58FD3D
game.dll+58FD9A: 48 8B 74 24 48           - mov rsi,[rsp+48]
game.dll+58FD9F: 8B 56 08                 - mov edx,[rsi+08]
game.dll+58FDA2: E8 49 46 E9 FF           - call game.dll+4243F0
game.dll+58FDA7: 83 F8 05                 - cmp eax,05
game.dll+58FDAA: 41 0F 95 C4              - setne r12b
game.dll+58FDAE: 75 92                    - jne game.dll+58FD42
game.dll+58FDB0: 41 0F 28 C1              - movaps xmm0,xmm9
game.dll+58FDB4: F3 41 0F 58 C7           - addss xmm0,xmm15
// ---------- INJECTING HERE ----------
game.dll+58FDB9: F3 43 0F 11 44 3E 04     - movss [r14+r15+04],xmm0
// ---------- DONE INJECTING  ----------
game.dll+58FDC0: 45 84 E4                 - test r12b,r12b
game.dll+58FDC3: 74 32                    - je game.dll+58FDF7
game.dll+58FDC5: 45 0F 2F D1              - comiss xmm10,xmm9
game.dll+58FDC9: 76 63                    - jna game.dll+58FE2E
game.dll+58FDCB: 41 0F 2F C2              - comiss xmm0,xmm10
game.dll+58FDCF: 72 5D                    - jb game.dll+58FE2E
game.dll+58FDD1: 41 80 BD B8 00 00 00 00  - cmp byte ptr [r13+000000B8],00
game.dll+58FDD9: 74 53                    - je game.dll+58FE2E
game.dll+58FDDB: 80 7C 24 40 00           - cmp byte ptr [rsp+40],00
game.dll+58FDE0: 74 4C                    - je game.dll+58FE2E
game.dll+58FDE2: 48 8B 4D 88              - mov rcx,[rbp-78]
game.dll+58FDE6: 48 8B D6                 - mov rdx,rsi
game.dll+58FDE9: F3 43 0F 11 44 3E 08     - movss [r14+r15+08],xmm0
game.dll+58FDF0: E8 8B 53 EA FF           - call game.dll+435180
game.dll+58FDF5: EB 2E                    - jmp game.dll+58FE25
game.dll+58FDF7: 45 0F 2F D9              - comiss xmm11,xmm9
game.dll+58FDFB: 76 31                    - jna game.dll+58FE2E
game.dll+58FDFD: 41 0F 2F C3              - comiss xmm0,xmm11
game.dll+58FE01: 72 2B                    - jb game.dll+58FE2E
game.dll+58FE03: 80 7C 24 40 00           - cmp byte ptr [rsp+40],00
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113960</ID>
          <Description>"Energy Shield Mod (edit your cd)(outdated)                                        (by gir489)"</Description>
          <Color>0080FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.20424.0
// MD5 Signature     : 714FB37A355B892081B500B0148D8A2B
// EXE Compile Date  : June 05, 2024 09:54 AM
// Script Date       : June 14, 2024 09:00 PM
[ENABLE]
aobscanmodule(aob_ShielDeezNutts,game.dll,F3 41 0F 5C CE F3 43 0F 11 4C 3E 08 0F 28 D1)
registersymbol(aob_ShielDeezNutts)
alloc(ShieldDeezNutts,1024)
label(ShieldDeezNutts_return)
ShieldDeezNutts:
  subss xmm1,xmm14
  comiss xmm1, dword ptr [compare_shield]
  jbe short @f
  movss xmm1, dword ptr [compare_shield]
@@:
  movss [r14+r15+8],xmm1
  movaps xmm2, xmm1
  jmp ShieldDeezNutts_return
compare_shield:
dd (float)4.0  // maximum shield cooldown duration in seconds
aob_ShielDeezNutts:
  jmp far ShieldDeezNutts
  nop
ShieldDeezNutts_return:
[DISABLE]
dealloc(ShieldDeezNutts)
unregistersymbol(aob_ShielDeezNutts)
aob_ShielDeezNutts:
  db F3 41 0F 5C CE F3 43 0F 11 4C 3E 08 0F 28 D1
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>117518</ID>
          <Description>"OnClick Armory Weapon Editor                                          (by cfemen)"</Description>
          <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">{$lua}
if syntaxcheck then return end
openProcess("helldivers2.exe")
Sleep(1000)
{$asm}
[ENABLE]
globalalloc(pVars,128)

label(pWeapon)
label(pFirerate)
registersymbol(pWeapon)
registersymbol(pFirerate)

pVars:
pWeapon:
dq 0
pFirerate:
dq 0


[DISABLE]

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>113943</ID>
              <Description>"OnClick Armory Weapon Editor"</Description>
              <Options moHideChildren="1"/>
              <Color>FF8000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : helldivers2.exe
  Version: 
  Date   : 2025-05-13
  Author : cfemen

  This script does blah blah blah
}


[ENABLE]
// AOB_ReadWeapon
// AOB_FireRate
// AOB_BlitzerDamage
// AOB_BlitzerFire
// AOB_ReadDamage
// AOB_DamageSpecial

aobscanmodule(AOB_ReadWeapon,game.dll,66 0F 6E 40 04 41 0F 28 C9 41 8B 57 3C F3 44 0F 11 4C 24 44) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(pWeapon)
registersymbol(pWeapon)
newmem:

code:
  mov [pWeapon],rax
  movd xmm0,[rax+04]
  movaps xmm1,xmm9
  mov edx,[r15+3C]
  movss [rsp+44],xmm9
  jmp return
pWeapon:
dq 0

AOB_ReadWeapon:
  jmp far newmem
  nop 6
return:
registersymbol(AOB_ReadWeapon)

aobscanmodule(AOB_FireRate,game.dll,D0 90 48 8D 89 80 00 00 00 0F 10 00 0F 10 48 10) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)
label(pFireRate)
registersymbol(pFireRate)
newmem2:

code2:
  push rbx
  mov ebx,[rax+8]
  test ebx,rbx
  je short @f
   mov rbx,pFireRate
   mov [rbx],rax
  @@:
  pop rbx
  lea rcx,[rcx+00000080]
  movups xmm0,[rax]
  movups xmm1,[rax+10]
  jmp return2
pFireRate:
dq 0

AOB_FireRate+02:
  jmp far newmem2
return2:
registersymbol(AOB_FireRate)

aobscanmodule(AOB_BlitzerDamage,game.dll,44 8B 7A 24 49 8B D6 66 0F 6E 70 04 0F 5B F6 45 85 FF 74 08 4B 8B 94 F8 90 84 25 02) // should be unique
alloc(newmem3,$1000)

label(code3)
label(return3)

newmem3:

code3:
  mov rdx,pWeapon
  mov [rdx],rax
  mov r15d,[rdx+24]
  mov rdx,r14
  movd xmm6,[rax+04]
  cvtdq2ps xmm6,xmm6
  jmp return3

AOB_BlitzerDamage:
  jmp far newmem3
  nop
return3:
registersymbol(AOB_BlitzerDamage)

aobscanmodule(AOB_BlitzerFire,game.dll,0F 10 48 10 48 8D 4C 24 70 0F 29 44 24 70) // should be unique
alloc(newmem4,$1000)

label(code4)
label(return4)

newmem4:

code4:
  lea rcx,[rax-4]
  push rbx
  mov rbx,pFireRate
  mov [rbx],rcx
  pop rbx
  movups xmm1,[rax+10]
  lea rcx,[rsp+70]
  movaps [rsp+70],xmm0
  jmp return4

AOB_BlitzerFire:
  jmp far newmem4
return4:
registersymbol(AOB_BlitzerFire)

aobscanmodule(AOB_ReadDamage,game.dll,F3 44 0F 10 B5 F8 01 00 00 4D 8B C6 66 0F 6E 40 04) // should be unique
alloc(newmem5,$1000)

label(code5)
label(return5)

newmem5:

code5:
  mov r8,pWeapon
  mov [r8],rax
  movss xmm14,[rbp+000001F8]
  mov r8,r14
  movd xmm0,[rax+04]
  jmp return5

AOB_ReadDamage:
  jmp far newmem5
  nop 3
return5:
registersymbol(AOB_ReadDamage)

aobscanmodule(AOB_DamageSpecial,game.dll,66 0F 6E 40 04 4D 8B C6 41 8B 57 0C 0F 5B C0) // should be unique
alloc(newmem6,$1000)

label(code6)
label(return6)

newmem6:

code6:
  mov r8,pWeapon
  mov [r8],rax
  movd xmm0,[rax+04]
  mov r8,r14
  mov edx,[r15+0C]
  cvtdq2ps xmm0,xmm0
  jmp return6

AOB_DamageSpecial:
  jmp far newmem6
  nop
return6:
registersymbol(AOB_DamageSpecial)

aobscanmodule(AOB_ReadSpecialDamage,game.dll,45 8B C4 0F 28 C7 66 0F 6E 70 04 0F 5B F6 F3 0F 59 35 ) // should be unique
alloc(newmem7,$1000)

label(code7)
label(return7)

newmem7:

code7:
  mov r8,pWeapon
  mov [r8],rax
  mov r8d,r12d
  movaps xmm0,xmm7
  movd xmm6,[rax+04]
  cvtdq2ps xmm6,xmm6
  jmp return7

AOB_ReadSpecialDamage:
  jmp far newmem7
return7:
registersymbol(AOB_ReadSpecialDamage)

[DISABLE]

AOB_ReadWeapon:
  db 66 0F 6E 40 04 41 0F 28 C9 41 8B 57 3C F3 44 0F 11 4C 24 44

unregistersymbol(AOB_ReadWeapon)
dealloc(newmem)

AOB_FireRate+02:
  db 48 8D 89 80 00 00 00 0F 10 00 0F 10 48 10

unregistersymbol(AOB_FireRate)
dealloc(newmem2)

AOB_BlitzerDamage:
  db 44 8B 7A 24 49 8B D6 66 0F 6E 70 04 0F 5B F6

unregistersymbol(AOB_BlitzerDamage)
dealloc(newmem3)

AOB_BlitzerFire:
  db 0F 10 48 10 48 8D 4C 24 70 0F 29 44 24 70

unregistersymbol(AOB_BlitzerFire)
dealloc(newmem4)
AOB_ReadDamage:
  db F3 44 0F 10 B5 F8 01 00 00 4D 8B C6 66 0F 6E 40 04

unregistersymbol(AOB_ReadDamage)
dealloc(newmem5)

AOB_DamageSpecial:
  db 66 0F 6E 40 04 4D 8B C6 41 8B 57 0C 0F 5B C0

unregistersymbol(AOB_DamageSpecial)
dealloc(newmem6)

AOB_ReadSpecialDamage:
  db 45 8B C4 0F 28 C7 66 0F 6E 70 04 0F 5B F6

unregistersymbol(AOB_ReadSpecialDamage)
dealloc(newmem7)

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>113944</ID>
                  <Description>"Firerate:"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>pFirerate</Address>
                  <Offsets>
                    <Offset>8</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>117523</ID>
                  <Description>"Damage:"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pWeapon</Address>
                  <Offsets>
                    <Offset>4</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>113946</ID>
                  <Description>"Structure Penetration"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pWeapon</Address>
                  <Offsets>
                    <Offset>8</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>113947</ID>
                  <Description>"Penetration (No Angle)"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pWeapon</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>113948</ID>
                  <Description>"Penetration (Angle)"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pWeapon</Address>
                  <Offsets>
                    <Offset>10</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>113949</ID>
                  <Description>"Demolition"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pWeapon</Address>
                  <Offsets>
                    <Offset>1C</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>117443</ID>
          <Description>"Add x? Resources(Samples) On Pickup                                (by cfemen)"</Description>
          <Options moHideChildren="1"/>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">{ Game   : helldivers2.exe
  Version: 
  Date   : 2024-08-06
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(aobAddSamples,game.dll,01 41 04 49 8B 46 30 4D 8B 46 40 4C 03 C3) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(iAmount)
registersymbol(iAmount)
label(bEverything)
registersymbol(bEverything)
newmem:

code:
mov eax,[iAmount]
cmp byte ptr[bEverything],0
je short L_Single
 push rbx
 mov rbx,[r14+40]
 add [rbx+4],eax // common
 add [rbx+8],eax // rare
 add [rbx+C],eax // super
 pop rbx
 xor eax,eax
L_Single:
  add [rcx+04],eax
  mov rax,[r14+30]
  mov r8,[r14+40]
  add r8,rbx
  jmp return
iAmount:
dd #5
bEverything:
db 0

aobAddSamples:
  jmp far newmem
return:
registersymbol(aobAddSamples)

[DISABLE]

aobAddSamples:
  db 01 41 04 49 8B 46 30 4D 8B 46 40 4C 03 C3

unregistersymbol(aobAddSamples)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+64E219

game.dll+64E1F1: FF CD                    - dec ebp
game.dll+64E1F3: 8B D0                    - mov edx,eax
game.dll+64E1F5: 48 6B C2 13              - imul rax,rdx,13
game.dll+64E1F9: 48 6B DA 4C              - imul rbx,rdx,4C
game.dll+64E1FD: 48 03 E8                 - add rbp,rax
game.dll+64E200: 48 8D 34 D5 00 00 00 00  - lea rsi,[rdx*8+00000000]
game.dll+64E208: 49 8B 46 40              - mov rax,[r14+40]
game.dll+64E20C: BA 94 4C 74 92           - mov edx,92744C94
game.dll+64E211: 48 8D 0C A8              - lea rcx,[rax+rbp*4]
game.dll+64E215: 41 8D 04 3F              - lea eax,[r15+rdi]
// ---------- INJECTING HERE ----------
game.dll+64E219: 01 41 04                 - add [rcx+04],eax
// ---------- DONE INJECTING  ----------
game.dll+64E21C: 49 8B 46 30              - mov rax,[r14+30]
game.dll+64E220: 4D 8B 46 40              - mov r8,[r14+40]
game.dll+64E224: 4C 03 C3                 - add r8,rbx
game.dll+64E227: 48 8B 0C 30              - mov rcx,[rax+rsi]
game.dll+64E22B: 8B 49 10                 - mov ecx,[rcx+10]
game.dll+64E22E: E8 BD 87 4A 00           - call game.dll+AF69F0
game.dll+64E233: 49 8B 46 40              - mov rax,[r14+40]
game.dll+64E237: BA 32 B8 26 20           - mov edx,2026B832
game.dll+64E23C: 01 7C A8 28              - add [rax+rbp*4+28],edi
game.dll+64E240: 49 8B 46 30              - mov rax,[r14+30]
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>117444</ID>
              <Description>"Amount:"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>iAmount</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>117445</ID>
              <Description>"Add All 3 Types At Once"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
bEverything:
db 1

 
 
[DISABLE]
bEverything:
db 0
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>113939</ID>
      <Description>"Solo Farming (please play alone), show my children to edit the samples"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <Color>00FF00</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>117465</ID>
          <Description>"Solo mods"</Description>
          <Options moAlwaysHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <Color>00FF00</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>117461</ID>
              <Description>"Inf Time                                                                          (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : helldivers2.exe
  Version:
  Date   : 2024-12-13
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(aobSubTime,game.dll,F3 0F 5C C7 F3 41 0F 5F C7) // should be unique

aobSubTime:
  nop 4

registersymbol(aobSubTime)

[DISABLE]

aobSubTime:
  db F3 0F 5C C7

unregistersymbol(aobSubTime)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113976</ID>
              <Description>"Inf Health                                                                       (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

aobscanmodule(aobReadLocalPlayerHealth,game.dll,41 8B 47 18 4C 8B 7C 24 20 4C 8B 74 24 28) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(pHealth)
registersymbol(pHealth)
newmem:

code:
  lea rax,[rax+rcx*8]
  mov [pHealth],rax
  mov [rax],#9999
  mov eax,[r15+18]
  mov r15,[rsp+20]
  mov r14,[rsp+28]
  jmp return
pHealth:
dq 0

aobReadLocalPlayerHealth:
  jmp far newmem
return:
registersymbol(aobReadLocalPlayerHealth)



aobscanmodule(aobWriteHealth,game.dll,41 89 2C 00 48 8B 46 38 4C 03 46 50 4A 8B 0C C8) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  push rbx
  push rcx
  mov rbx,pHealth
  mov rbx,[rbx]
  lea rcx,[r8+rax]
  cmp rbx,rcx
  jne short @f
   mov ebp,#9999
  @@:
  pop rcx
  pop rbx
  mov [r8+rax],ebp
  mov rax,[rsi+38]
  add r8,[rsi+50]
  mov rcx,[rax+r9*8]
  jmp return2

aobWriteHealth:
  jmp far newmem2
  nop 2
return2:
registersymbol(aobWriteHealth)

[DISABLE]

aobReadLocalPlayerHealth:
  db 41 8B 47 18 4C 8B 7C 24 20 4C 8B 74 24 28

unregistersymbol(aobReadLocalPlayerHealth)
dealloc(newmem)

aobWriteHealth:
  db 41 89 2C 00 48 8B 46 38 4C 03 46 50 4A 8B 0C C8

unregistersymbol(aobWriteHealth)
dealloc(newmem2)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113977</ID>
              <Description>"Inf Stamina                                                                    (by gir489+cfemen)"</Description>
              <Color>8080FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">[ENABLE]

aobscanmodule(aobSprintWrite,game.dll,F3 41 0F 11 08 48 8B 84 F8) // should be unique

aobSprintWrite:
  nop 5
registersymbol(aobSprintWrite)

[DISABLE]

aobSprintWrite:
  db F3 41 0F 11 08

unregistersymbol(aobSprintWrite)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117464</ID>
              <Description>"Inf stims                                                                        (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

aobscanmodule(aobSyrige,game.dll,41 89 54 CE 04 41 8B 45 08) // should be unique

aobSyrige:
  db 90 90 90 90 90

registersymbol(aobSyrige)

[DISABLE]

aobSyrige:
  db 41 89 54 CE 04

unregistersymbol(aobSyrige)


</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113979</ID>
              <Description>"Inf grenade                                                                    (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]


aobscanmodule(aobNades,game.dll,42 FF 0C E0 49 8B 46 58) // should be unique

aobNades:
  nop 4

registersymbol(aobNades)

[DISABLE]

aobNades:
  db 42 FF 0C E0

unregistersymbol(aobNades)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113980</ID>
              <Description>"Inf Mags                                                                        (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

aobscanmodule(aobAmmo,game.dll,42 83 2C 81 01 48 8B 45 38) // should be unique

aobAmmo:
 db 90 90 90 90 90
registersymbol(aobAmmo)

[DISABLE]

aobAmmo:
  db 42 83 2C 81 01 48 8B 45 38

unregistersymbol(aobAmmo)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117433</ID>
              <Description>"No ammo consume                                                       (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">[ENABLE]

aobscanmodule(aobReload,game.dll,44 89 74 01 04 4D 8B 42 50 49 8B 42 38) // should be unique
registersymbol(aobReload)
aobReload:
  nop 5
[DISABLE]

aobReload:
 db 44 89 74 01 04

unregistersymbol(aobReload)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113982</ID>
              <Description>"Inf Jetpack                                                                      (by ???)"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_ToTheSky,game.dll,89 04 B9 83 FD 01)
registersymbol(aob_ToTheSky)

aob_ToTheSky:
  nop 3

[DISABLE]
aob_ToTheSky:
  db 89 04 B9
unregistersymbol(aob_ToTheSky)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117453</ID>
              <Description>"Infinite Autocannon Backpack                                        (by ???)"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_Autocannon,game.dll,2B C8 BA)
registersymbol(aob_Autocannon)
aob_Autocannon:
nop 2
[DISABLE]
aob_Autocannon:
  db 2B C8
unregistersymbol(aob_Autocannon)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113983</ID>
              <Description>"Inf Shield                                                                        (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : helldivers2.exe
  Version:
  Date   : 2025-05-13
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(aobCalcShield,game.dll,F3 41 0F 5C CE F3 43 0F 11 4C 3E 4C 0F 28 D1) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
test rsi,rsi
  je short @f
  push rax
  mov rax,12C8D71AC3897A5C
  cmp [rsi],rax
  jne short @f
     pop rax
     subss xmm1,xmm1
     movss [r14+r15+4C],xmm1
     movaps xmm2,xmm1
  jmp return
  @@:
  pop rax
  subss xmm1,xmm14
  movss [r14+r15+4C],xmm1
  movaps xmm2,xmm1
  jmp return

aobCalcShield:
  jmp far newmem
  nop
return:
registersymbol(aobCalcShield)

[DISABLE]

aobCalcShield:
  db F3 41 0F 5C CE F3 43 0F 11 4C 3E 4C 0F 28 D1

unregistersymbol(aobCalcShield)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+6C55C3

game.dll+6C5599: 48 8B 43 48           - mov rax,[rbx+48]
game.dll+6C559D: 4C 8B 43 58           - mov r8,[rbx+58]
game.dll+6C55A1: 49 FF C0              - inc r8
game.dll+6C55A4: 4D 03 C4              - add r8,r12
game.dll+6C55A7: 4A 8B 0C 28           - mov rcx,[rax+r13]
game.dll+6C55AB: 8B 49 10              - mov ecx,[rcx+10]
game.dll+6C55AE: E8 DD E1 56 00        - call game.dll+C33790
game.dll+6C55B3: F3 43 0F 10 4C 3E 4C  - movss xmm1,[r14+r15+4C]
game.dll+6C55BA: 0F 2F CF              - comiss xmm1,xmm7
game.dll+6C55BD: 0F 86 F6 00 00 00     - jbe game.dll+6C56B9
// ---------- INJECTING HERE ----------
game.dll+6C55C3: F3 41 0F 5C CE        - subss xmm1,xmm14
// ---------- DONE INJECTING  ----------
game.dll+6C55C8: F3 43 0F 11 4C 3E 4C  - movss [r14+r15+4C],xmm1
game.dll+6C55CF: 0F 28 D1              - movaps xmm2,xmm1
game.dll+6C55D2: 41 80 7C 2C 02 00     - cmp byte ptr [r12+rbp+02],00
game.dll+6C55D8: 74 70                 - je game.dll+6C564A
game.dll+6C55DA: 0F 28 C1              - movaps xmm0,xmm1
game.dll+6C55DD: F3 41 0F 58 C6        - addss xmm0,xmm14
game.dll+6C55E2: 0F 2F C6              - comiss xmm0,xmm6
game.dll+6C55E5: 76 63                 - jna game.dll+6C564A
game.dll+6C55E7: 0F 2F F1              - comiss xmm6,xmm1
game.dll+6C55EA: 72 5E                 - jb game.dll+6C564A
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113984</ID>
              <Description>"Inf Stratagems                                                                (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">{ Game   : helldivers2.exe
  Version:
  Date   : 2024-03-21
  Author : cfe

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(aobStratacmp,game.dll,0F 86 B1 01 00 00 0F ) // should be unique

aobStratacmp:
  db 90 E9
registersymbol(aobStratacmp)

[DISABLE]

aobStratacmp:
  db 0F 86

unregistersymbol(aobStratacmp)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113971</ID>
              <Description>"No Recoil                                                                        (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

aobscanmodule(aobRecoil,game.dll,48 83 EC 18 48 8B 01) // should be unique

aobRecoil:
  db C3
registersymbol(aobRecoil)

[DISABLE]

aobRecoil:
  db 48
unregistersymbol(aobRecoil)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113972</ID>
              <Description>"No Sway                                                                         (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : helldivers2.exe
  Version:
  Date   : 2024-12-13
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(aobCalcSway,game.dll,F3 0F 51 C2 EB ? 0F 28 C2 E8 ? ? ? ? F3 44 0F 59 C8) // should be unique

aobCalcSway:
  nop 4

[DISABLE]

aobCalcSway:
  db F3 0F 51 C2

unregistersymbol(aobCalcSway)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113931</ID>
              <Description>"Show All Map Icons                                                        (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.27207.0
// MD5 Signature     : 14C848EF74B1A8FEF0AC3DB6E396B3D2
// EXE Compile Date  : January 28, 2025 10:15 AM
// Script Date       : February 04, 2025 06:37 PM
[ENABLE]
aobscanmodule(aob_CheckIsBlipSeen,game.dll,44 0F B6 68 ? F3 0F 59 C2)
aobscanmodule(aob_CheckIfAlienHivesAreObstructed,game.dll,41 80 BC 24 ? ? ? ? ? F2 44 0F 11 65)
aobscanmodule(aob_CheckIfAlienHiveSeen,game.dll, 0F 84 ? ? ? ? 83 7C 24 ? ? 0F 83)
aobscanmodule(aob_CheckIfAlienHiveVisible,game.dll, 75 ? 41 80 BF ? ? ? ? ? 0F 85)
aobscanmodule(aob_CheckIfMinorInterestBlipIsDiscovered,game.dll, 0F 85 ? ? ? ? 48 8B 44 24 ? 80 78)
//aobscanmodule(aob_GetMinorInterestBlipIcon,game.dll, 0F 84 ? ? ? ? 48 8B 54 24 ? F3 42 0F 10 4C EB)
aobscanmodule(aob_CheckMissionBlip,game.dll,0F 85 ? ? ? ? 48 8D BE ? ? ? ? 41 0F 28 CE)
registersymbol(aob_CheckIsBlipSeen)
registersymbol(aob_CheckIfAlienHivesAreObstructed)
registersymbol(aob_CheckIfAlienHiveSeen)
registersymbol(aob_CheckIfMinorInterestBlipIsDiscovered)
registersymbol(aob_CheckMissionBlip)


aob_CheckIsBlipSeen:
  mov r13w,1

aob_CheckIfAlienHiveSeen:
  db 0F 87

aob_CheckIfMinorInterestBlipIsDiscovered:
  db 90 E9

aob_CheckIfAlienHivesAreObstructed+8:
  db 02

aob_CheckIfAlienHiveVisible:
  db EB

aob_CheckMissionBlip:
  db 90 E9

[DISABLE]
aob_CheckIsBlipSeen:
 db 44 0F B6 68 33

aob_CheckIfAlienHiveSeen:
  db 0F 84

aob_CheckIfMinorInterestBlipIsDiscovered:
  db 0F 85

aob_CheckIfAlienHivesAreObstructed+8:
  db 00

aob_CheckIfAlienHiveVisible:
  db 75

aob_CheckMissionBlip:
  db 0F 85

unregistersymbol(aob_CheckMissionBlip)
unregistersymbol(aob_CheckIsBlipSeen)
unregistersymbol(aob_CheckIfAlienHivesAreObstructed)
unregistersymbol(aob_CheckIfAlienHiveSeen)
unregistersymbol(aob_CheckIfAlienHiveVisible)
unregistersymbol(aob_CheckIfMinorInterestBlipIsDiscovered)
unregistersymbol(aob_CheckMissionBlip)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113964</ID>
              <Description>"Instant Shuttle                                                                (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : helldivers2.exe
  Version:
  Date   : 2025-09-02
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(aobSubTimer,game.dll,F3 0F 5C C3 BA 66 F7 09 61 F3 0F 11 04 01) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
  ucomiss xmm0, DWORD [compare_float_check]
  jbe short @f
    movss xmm0, DWORD [compare_float_check]
  @@:
code:
  subss xmm0,xmm3
  mov edx,6109F766
  movss [rcx+rax],xmm0
  jmp return
compare_float_check:
dd (float)1.0

aobSubTimer:
  jmp far newmem
return:
registersymbol(aobSubTimer)

[DISABLE]

aobSubTimer:
  db F3 0F 5C C3 BA 66 F7 09 61 F3 0F 11 04 01

unregistersymbol(aobSubTimer)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+687E82

game.dll+687E66: 32 DB           - xor bl,bl
game.dll+687E68: FF C1           - inc ecx
game.dll+687E6A: 48 83 C2 1C     - add rdx,1C
game.dll+687E6E: 41 3B C8        - cmp ecx,r8d
game.dll+687E71: 72 DD           - jb game.dll+687E50
game.dll+687E73: 84 DB           - test bl,bl
game.dll+687E75: 75 35           - jne game.dll+687EAC
game.dll+687E77: 48 8B 47 78     - mov rax,[rdi+78]
game.dll+687E7B: 0F 28 C6        - movaps xmm0,xmm6
game.dll+687E7E: 49 6B CF 3C     - imul rcx,r15,3C
// ---------- INJECTING HERE ----------
game.dll+687E82: F3 0F 5C C3     - subss xmm0,xmm3
// ---------- DONE INJECTING  ----------
game.dll+687E86: BA 66 F7 09 61  - mov edx,6109F766
game.dll+687E8B: F3 0F 11 04 01  - movss [rcx+rax],xmm0
game.dll+687E90: 48 8B 47 60     - mov rax,[rdi+60]
game.dll+687E94: 4C 8B 47 78     - mov r8,[rdi+78]
game.dll+687E98: 4C 03 C1        - add r8,rcx
game.dll+687E9B: 4A 8B 0C F8     - mov rcx,[rax+r15*8]
game.dll+687E9F: 8B 49 10        - mov ecx,[rcx+10]
game.dll+687EA2: E8 A9 1B 62 00  - call game.dll+CA9A50
game.dll+687EA7: 49 8B D7        - mov rdx,r15
game.dll+687EAA: EB 44           - jmp game.dll+687EF0
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117431</ID>
              <Description>"instant complete all missions                                         (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">[ENABLE]

aobscanmodule(aobInsta1,game.dll,45 8B 4A 18 48 8D 8D 48 01 00 00 41 8B D4) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [r10+18],1
  mov r9d,[r10+18]
  lea rcx,[rbp+00000148]
  mov edx,r12d
  jmp return

aobInsta1:
  jmp far newmem
return:
registersymbol(aobInsta1)

aobscanmodule(aobInsta2,game.dll,8B 46 20 83 E8 02 83 F8 01 41 8B 85 14 08 00 00) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  mov [rsi+20],2
  mov eax,[rsi+20]
  sub eax,02
  cmp eax,01
  mov eax,[r13+00000814]
  jmp return2

aobInsta2:
  jmp far newmem2
  nop 2
return2:
registersymbol(aobInsta2)

[DISABLE]

aobInsta1:
  db 45 8B 4A 18 48 8D 8D 48 01 00 00 41 8B D4

unregistersymbol(aobInsta1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+5DF5BC

game.dll+5DF59B: 44 03 F0              - add r14d,eax
game.dll+5DF59E: FF C3                 - inc ebx
game.dll+5DF5A0: 3B 5E 0C              - cmp ebx,[rsi+0C]
game.dll+5DF5A3: 72 BB                 - jb game.dll+5DF560
game.dll+5DF5A5: 4C 8B 54 24 68        - mov r10,[rsp+68]
game.dll+5DF5AA: 44 38 A5 CC 09 00 00  - cmp [rbp+000009CC],r12b
game.dll+5DF5B1: 74 09                 - je game.dll+5DF5BC
game.dll+5DF5B3: 45 38 62 30           - cmp [r10+30],r12b
game.dll+5DF5B7: 75 03                 - jne game.dll+5DF5BC
game.dll+5DF5B9: 41 FF C6              - inc r14d
// ---------- INJECTING HERE ----------
game.dll+5DF5BC: 45 8B 4A 18           - mov r9d,[r10+18]
// ---------- DONE INJECTING  ----------
game.dll+5DF5C0: 48 8D 8D 48 01 00 00  - lea rcx,[rbp+00000148]
game.dll+5DF5C7: 41 8B D4              - mov edx,r12d
game.dll+5DF5CA: 66 0F 1F 44 00 00     - nop word ptr [rax+rax+00]
game.dll+5DF5D0: 41 3B D1              - cmp edx,r9d
game.dll+5DF5D3: 73 34                 - jae game.dll+5DF609
game.dll+5DF5D5: 44 8B 81 F8 FE FF FF  - mov r8d,[rcx-00000108]
game.dll+5DF5DC: 45 85 C0              - test r8d,r8d
game.dll+5DF5DF: 74 28                 - je game.dll+5DF609
game.dll+5DF5E1: 41 8D 40 FD           - lea eax,[r8-03]
game.dll+5DF5E5: 83 F8 02              - cmp eax,02
}
aobInsta2:
  db 8B 46 20 83 E8 02 83 F8 01 41 8B 85 14 08 00 00

unregistersymbol(aobInsta2)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+5DF122

game.dll+5DF0F5: 48 8D 54 24 70        - lea rdx,[rsp+70]
game.dll+5DF0FA: 4D 69 E8 60 08 00 00  - imul r13,r8,00000860
game.dll+5DF101: 49 6B F0 54           - imul rsi,r8,54
game.dll+5DF105: 4D 03 6A 60           - add r13,[r10+60]
game.dll+5DF109: 44 8B C7              - mov r8d,edi
game.dll+5DF10C: 49 8B CA              - mov rcx,r10
game.dll+5DF10F: 4C 89 6C 24 40        - mov [rsp+40],r13
game.dll+5DF114: 49 03 72 68           - add rsi,[r10+68]
game.dll+5DF118: 48 89 74 24 68        - mov [rsp+68],rsi
game.dll+5DF11D: E8 0E 18 00 00        - call game.dll+5E0930
// ---------- INJECTING HERE ----------
game.dll+5DF122: 8B 46 20              - mov eax,[rsi+20]
// ---------- DONE INJECTING  ----------
game.dll+5DF125: 83 E8 02              - sub eax,02
game.dll+5DF128: 83 F8 01              - cmp eax,01
game.dll+5DF12B: 41 8B 85 14 08 00 00  - mov eax,[r13+00000814]
game.dll+5DF132: 76 16                 - jna game.dll+5DF14A
game.dll+5DF134: 8B 56 18              - mov edx,[rsi+18]
game.dll+5DF137: 45 32 FF              - xor r15b,r15b
game.dll+5DF13A: 89 54 24 30           - mov [rsp+30],edx
game.dll+5DF13E: EB 14                 - jmp game.dll+5DF154
game.dll+5DF140: 3B C7                 - cmp eax,edi
game.dll+5DF142: 75 AC                 - jne game.dll+5DF0F0
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117526</ID>
              <Description>"Speedhack                                                                      (by gir489)"</Description>
              <Options moHideChildren="1"/>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">{ Game   : helldivers2.exe
  Version:
  Date   : 2025-05-13
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(AOB_Speed,game.dll,F3 0F 59 4B 78 F3 0F 59 4B 7C 0F 28 D9 F3 0F 5C DC) // should be unique
alloc(newmem,$1000)
alloc(fSpeed,4)
registersymbol(fSpeed)

fSpeed:
db (float)1.25

label(code)
label(return)
label(bFreeze)
registersymbol(bFreeze)
newmem:

code:
  push rcx
  lea rcx,[rsi+70]
  cmp rbx,rcx // TransformArray[0] ?
  je Player
  mov rcx,712947D6712947D6 // Ship
  cmp [r15],rcx
  je Player
  jmp Enemy
Player:
    mov rcx,fSpeed
    mulss xmm1,[rcx]
    mulss xmm1,[rbx+78]
    mulss xmm1,[rbx+7C]
    movaps xmm3,xmm1
    subss xmm3,xmm4
    pop rcx
    jmp return
Enemy:
  pop rcx
  cmp byte ptr[bFreeze],1
  jne short @f
   xorps xmm1,xmm1
  @@:
  mulss xmm1,[rbx+78]
  mulss xmm1,[rbx+7C]
  movaps xmm3,xmm1
  subss xmm3,xmm4
  jmp return
bFreeze:
db 0

AOB_Speed:
  jmp far newmem
  nop 3
return:
registersymbol(AOB_Speed)

[DISABLE]

AOB_Speed:
  db F3 0F 59 4B 78 F3 0F 59 4B 7C 0F 28 D9 F3 0F 5C DC

unregistersymbol(AOB_Speed)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+731947

game.dll+731913: 41 0F 28 F1              - movaps xmm6,xmm9
game.dll+731917: F3 0F 5D F0              - minss xmm6,xmm0
game.dll+73191B: EB 06                    - jmp game.dll+731923
game.dll+73191D: F3 0F 10 7C 24 40        - movss xmm7,[rsp+40]
game.dll+731923: F3 0F 10 4B 70           - movss xmm1,[rbx+70]
game.dll+731928: F3 0F 59 4B 6C           - mulss xmm1,[rbx+6C]
game.dll+73192D: F3 0F 10 A3 80 00 00 00  - movss xmm4,[rbx+00000080]
game.dll+731935: F2 0F 10 2D 03 97 CA 00  - movsd xmm5,[game.dll+13DB040]
game.dll+73193D: F3 0F 59 4B 74           - mulss xmm1,[rbx+74]
game.dll+731942: F3 0F 10 53 30           - movss xmm2,[rbx+30]
// ---------- INJECTING HERE ----------
game.dll+731947: F3 0F 59 4B 78           - mulss xmm1,[rbx+78]
// ---------- DONE INJECTING  ----------
game.dll+73194C: F3 0F 59 4B 7C           - mulss xmm1,[rbx+7C]
game.dll+731951: 0F 28 D9                 - movaps xmm3,xmm1
game.dll+731954: F3 0F 5C DC              - subss xmm3,xmm4
game.dll+731958: 0F 5A C3                 - cvtps2pd xmm0,xmm3
game.dll+73195B: 0F 54 05 7E DC CA 00     - andps xmm0,[game.dll+13DF5E0]
game.dll+731962: 66 0F 2F E8              - comisd xmm5,xmm0
game.dll+731966: 77 20                    - ja game.dll+731988
game.dll+731968: F3 0F 59 D7              - mulss xmm2,xmm7
game.dll+73196C: 44 0F 2F E2              - comiss xmm12,xmm2
game.dll+731970: 76 06                    - jna game.dll+731978
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>117527</ID>
                  <Description>"Speed:"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>fSpeed</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>117528</ID>
                  <Description>"Freeze Non Player Characters"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
bFreeze:
db 1

 
 
[DISABLE]
bFreeze:
db 0

</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>113967</ID>
              <Description>"Instant Railgun/Arc Ready(outdated)                                              (by gir489)"</Description>
              <Color>0080FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.25984.0
// MD5 Signature     : F1A0F5136B9035B653BDE0217332B2C8
// EXE Compile Date  : December 06, 2024 11:43 AM
// Script Date       : December 12, 2024 10:40 PM
[ENABLE]
aobscanmodule(aob_RailgunCharge,game.dll, F3 43 0F 11 44 F7 ? 45 84 E4)
registersymbol(aob_RailgunCharge)
assert(aob_RailgunCharge+3F, 45 0F 2F D9)
alloc(newmem,1024)
label(return)

newmem:
  mov [r15+r14*8+4], (float)2.999999
  movss xmm0, [r15+r14*8+4]
  test r12b,r12b
  je far return+2F
  comiss xmm10,xmm9
  jmp far return

aob_RailgunCharge:
  jmp far newmem
  nop 2
return:

[DISABLE]
aob_RailgunCharge:
  db F3 43 0F 11 44 F7 04 45 84 E4 74 33 45 0F 2F D1

unregistersymbol(aob_RailgunCharge)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+58FDB9

game.dll+58FD6C: 0F 85 53 FF FF FF        - jne game.dll+58FCC5
game.dll+58FD72: 41 8B 44 D2 04           - mov eax,[r10+rdx*8+04]
game.dll+58FD77: 83 F8 FF                 - cmp eax,-01
game.dll+58FD7A: 0F 84 45 FF FF FF        - je game.dll+58FCC5
game.dll+58FD80: 8B C8                    - mov ecx,eax
game.dll+58FD82: 49 8B 43 38              - mov rax,[r11+38]
game.dll+58FD86: 8B 3C 88                 - mov edi,[rax+rcx*4]
game.dll+58FD89: E9 3D FF FF FF           - jmp game.dll+58FCCB
game.dll+58FD8E: 3B C3                    - cmp eax,ebx
game.dll+58FD90: 75 AB                    - jne game.dll+58FD3D
game.dll+58FD92: 41 83 7C D2 04 FF        - cmp dword ptr [r10+rdx*8+04],-01
game.dll+58FD98: 74 A3                    - je game.dll+58FD3D
game.dll+58FD9A: 48 8B 74 24 48           - mov rsi,[rsp+48]
game.dll+58FD9F: 8B 56 08                 - mov edx,[rsi+08]
game.dll+58FDA2: E8 49 46 E9 FF           - call game.dll+4243F0
game.dll+58FDA7: 83 F8 05                 - cmp eax,05
game.dll+58FDAA: 41 0F 95 C4              - setne r12b
game.dll+58FDAE: 75 92                    - jne game.dll+58FD42
game.dll+58FDB0: 41 0F 28 C1              - movaps xmm0,xmm9
game.dll+58FDB4: F3 41 0F 58 C7           - addss xmm0,xmm15
// ---------- INJECTING HERE ----------
game.dll+58FDB9: F3 43 0F 11 44 3E 04     - movss [r14+r15+04],xmm0
// ---------- DONE INJECTING  ----------
game.dll+58FDC0: 45 84 E4                 - test r12b,r12b
game.dll+58FDC3: 74 32                    - je game.dll+58FDF7
game.dll+58FDC5: 45 0F 2F D1              - comiss xmm10,xmm9
game.dll+58FDC9: 76 63                    - jna game.dll+58FE2E
game.dll+58FDCB: 41 0F 2F C2              - comiss xmm0,xmm10
game.dll+58FDCF: 72 5D                    - jb game.dll+58FE2E
game.dll+58FDD1: 41 80 BD B8 00 00 00 00  - cmp byte ptr [r13+000000B8],00
game.dll+58FDD9: 74 53                    - je game.dll+58FE2E
game.dll+58FDDB: 80 7C 24 40 00           - cmp byte ptr [rsp+40],00
game.dll+58FDE0: 74 4C                    - je game.dll+58FE2E
game.dll+58FDE2: 48 8B 4D 88              - mov rcx,[rbp-78]
game.dll+58FDE6: 48 8B D6                 - mov rdx,rsi
game.dll+58FDE9: F3 43 0F 11 44 3E 08     - movss [r14+r15+08],xmm0
game.dll+58FDF0: E8 8B 53 EA FF           - call game.dll+435180
game.dll+58FDF5: EB 2E                    - jmp game.dll+58FE25
game.dll+58FDF7: 45 0F 2F D9              - comiss xmm11,xmm9
game.dll+58FDFB: 76 31                    - jna game.dll+58FE2E
game.dll+58FDFD: 41 0F 2F C3              - comiss xmm0,xmm11
game.dll+58FE01: 72 2B                    - jb game.dll+58FE2E
game.dll+58FE03: 80 7C 24 40 00           - cmp byte ptr [rsp+40],00
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113994</ID>
              <Description>"No Laser Overheat                                                          (by gir489)"</Description>
              <Color>0000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_ImmaChargingMahLasor,game.dll,F3 0F 11 4C A8)
registersymbol(aob_ImmaChargingMahLasor)

aob_ImmaChargingMahLasor+3:
 db 7C

[DISABLE]
aob_ImmaChargingMahLasor+3:
 db 4C

unregistersymbol(aob_ImmaChargingMahLasor)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117488</ID>
              <Description>"Bunker hack                                                                     (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : helldivers2.exe
  Version:
  Date   : 2025-05-13
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(AOB_BunkerNew,game.dll,41 B8 01 00 00 00 4C 8B 11 8B CA 49 D3 E0 44) // should be unique

AOB_BunkerNew+2:
  db 03

registersymbol(AOB_BunkerNew)

[DISABLE]

AOB_BunkerNew+2:
  db 01
unregistersymbol(AOB_BunkerNew)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117457</ID>
              <Description>"Climb All                                                                          (by sakuno)"</Description>
              <Color>C080FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.xxx
  Date   : 2024-08-25
  Author : (Discord)Sakuno

  This little script allow you to climb up anything can climb.
}
{$lua}
AvatarDataReplacer=decodeFunction('c-n1^!AiqG5QhJ4m$,8MLPb!a=4guigvffyZ8sZw5/CR#QBo61p;1HBs:ciU=F0Bic^DdkMFodp[-6i{Wp:LbH%W{k()qFThce38,arEr@ePEj4vy:#ec[5HC6oo.OJHCvVSx1??dSl[,3:B6.J]:UX,v0erE,QuJE!esNCwi9,Gj(JM((tiZ]1Bfy)C3qB3D$J8p[l_7)XYg@GTq15b$xp#h43GWhg3c:C{3S[Ydh/M[g-ur?4rJ?n4Vc*Ar2-*YJK9RrJW:,w^z2v-!HnOuSuA@9AiTTj_AoIjz;{eIJOjG,P%Y-xB.6U,twn=f')
AvatarDataReplacer()
{$asm}
// X
AvatarClimbAddr:
  dd (float)50.0 // Default 1.95

// Y
AvatarClimbAddr+4:
  dd (float)50.0 // Default 1.40

[DISABLE]
// X
AvatarClimbAddr:
  dd (float)1.95

// Y
AvatarClimbAddr+4:
  dd (float)1.40

unregistersymbol(AvatarClimbAddr)
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>179</ID>
          <Description>"1 Sample--&gt;33 33 33                                                         (by cfemen)"</Description>
          <Options moAlwaysHideChildren="1"/>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">{ Game   : helldivers2.exe
  Version: 
  Date   : 2024-08-06
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(aobAddSamples,game.dll,01 41 04 49 8B 46 30 4D 8B 46 40 4C 03 C3) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(iAmount)
registersymbol(iAmount)
label(bEverything)
registersymbol(bEverything)
newmem:

code:
mov eax,[iAmount]
cmp byte ptr[bEverything],0
je short L_Single
 push rbx
 mov rbx,[r14+40]
 mov [rbx+4],eax // common
 mov [rbx+8],eax // rare
 mov [rbx+C],eax // super
 pop rbx
 xor eax,eax
L_Single:
  add [rcx+04],eax
  mov rax,[r14+30]
  mov r8,[r14+40]
  add r8,rbx
  jmp return
iAmount:
dd #33
bEverything:
db 1

aobAddSamples:
  jmp far newmem
return:
registersymbol(aobAddSamples)

[DISABLE]

aobAddSamples:
  db 01 41 04 49 8B 46 30 4D 8B 46 40 4C 03 C3

unregistersymbol(aobAddSamples)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+64E219

game.dll+64E1F1: FF CD                    - dec ebp
game.dll+64E1F3: 8B D0                    - mov edx,eax
game.dll+64E1F5: 48 6B C2 13              - imul rax,rdx,13
game.dll+64E1F9: 48 6B DA 4C              - imul rbx,rdx,4C
game.dll+64E1FD: 48 03 E8                 - add rbp,rax
game.dll+64E200: 48 8D 34 D5 00 00 00 00  - lea rsi,[rdx*8+00000000]
game.dll+64E208: 49 8B 46 40              - mov rax,[r14+40]
game.dll+64E20C: BA 94 4C 74 92           - mov edx,92744C94
game.dll+64E211: 48 8D 0C A8              - lea rcx,[rax+rbp*4]
game.dll+64E215: 41 8D 04 3F              - lea eax,[r15+rdi]
// ---------- INJECTING HERE ----------
game.dll+64E219: 01 41 04                 - add [rcx+04],eax
// ---------- DONE INJECTING  ----------
game.dll+64E21C: 49 8B 46 30              - mov rax,[r14+30]
game.dll+64E220: 4D 8B 46 40              - mov r8,[r14+40]
game.dll+64E224: 4C 03 C3                 - add r8,rbx
game.dll+64E227: 48 8B 0C 30              - mov rcx,[rax+rsi]
game.dll+64E22B: 8B 49 10                 - mov ecx,[rcx+10]
game.dll+64E22E: E8 BD 87 4A 00           - call game.dll+AF69F0
game.dll+64E233: 49 8B 46 40              - mov rax,[r14+40]
game.dll+64E237: BA 32 B8 26 20           - mov edx,2026B832
game.dll+64E23C: 01 7C A8 28              - add [rax+rbp*4+28],edi
game.dll+64E240: 49 8B 46 30              - mov rax,[r14+30]
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>180</ID>
              <Description>"Amount:"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>iAmount</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>181</ID>
              <Description>"Add All 3 Types At Once"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
bEverything:
db 0

 
 
[DISABLE]
bEverything:
db 1
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>117478</ID>
          <Description>"SUPERCREDITS DROP                                                         (by sakuno)"</Description>
          <Color>C080FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
{
Game   : Helldiver 2
Version: any game version
Date   : 2024-07-20
Author : (Discord)Sakuno

This script maybe freezing the cheat engine by few seconds when enabling.
Function: Replace the RESUPPLY POD slot 0 to super credit!
}
{$lua}
function HellpodDataReplacer0()
gHellpodDataAddr=AOBScan("79 75 4F 01 CA 13 49 A9 B2 50 46 93", '-W')
  if (gHellpodDataAddr == nil) then
     return
  end
  registerSymbol("HellpodDataAddr", gHellpodDataAddr[1])
gHellpodDataAddr.destroy()
end
HellpodDataReplacer0()

{$asm}

HellpodDataAddr: // ItemID
db 06 35 53 54 ED 03 86 81
//medals db 88 6F 72 13 95 D9 7B 14


[DISABLE]

HellpodDataAddr: // ItemID
db 79 75 4F 01 CA 13 49 A9
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>113940</ID>
      <Description>"Multiplayer Legit"</Description>
      <Options moAlwaysHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <Color>00FF00</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>113986</ID>
          <Description>"Inf Stamina                                                                          (by gir489+cfemen)"</Description>
          <Color>8080FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]

aobscanmodule(aobSprintWrite,game.dll,F3 41 0F 11 08 48 8B 84 F8) // should be unique

aobSprintWrite:
  nop 5
registersymbol(aobSprintWrite)

[DISABLE]

aobSprintWrite:
  db F3 41 0F 11 08

unregistersymbol(aobSprintWrite)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113987</ID>
          <Description>"Inf last Stim                                                                         (by gir489)"</Description>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(aob_Syringes,game.dll, 41 8B 54 EE 04 8B C8)
registersymbol(aob_Syringes)
alloc(newmem_Syringes,1024)
label(return_Syringes)

newmem_Syringes:
  mov edx,[r14+rbp*8+4]
  mov ecx,eax
  cmp edx, #1
  je short @f
    dec edx
  @@:
  mov [r14+rbp*8+4],edx
  jmp return_Syringes

aob_Syringes:
  jmp far newmem_Syringes
return_Syringes:

[DISABLE]
aob_Syringes:
  db 41 8B 54 EE 04 8B C8 FF CA 41 89 54 CE 04

unregistersymbol(aob_Syringes)
dealloc(newmem_Syringes)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113988</ID>
          <Description>"Inf grenade                                                                          (by gir489)"</Description>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(aob_Grenades,game.dll,42 FF 0C E0)
registersymbol(aob_Grenades)
alloc(newmem_Grenades,1024)
label(return_Grenades)

newmem_Grenades:
  cmp [rax+r12*8], #1
  je short @f
    dec [rax+r12*8]
  @@:
  mov rax,[r14+58]
  lea r8,[rax+r12*8]
  mov rax,[r14+40]
  jmp return_Grenades

aob_Grenades:
  jmp far newmem_Grenades
  nop 2
return_Grenades:

[DISABLE]
aob_Grenades:
  db 42 FF 0C E0 49 8B 46 58 4E 8D 04 E0 49 8B 46 40

unregistersymbol(aob_Grenades)
dealloc(newmem_Grenades)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113990</ID>
          <Description>"Inf Jetpack                                                                            (by ???)"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_ToTheSky,game.dll,89 04 B9 83 FD 01)
registersymbol(aob_ToTheSky)

aob_ToTheSky:
  nop 3

[DISABLE]
aob_ToTheSky:
  db 89 04 B9
unregistersymbol(aob_ToTheSky)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113991</ID>
          <Description>"Inf Stratagems                                                                      (by cfemen)"</Description>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">{ Game   : helldivers2.exe
  Version:
  Date   : 2024-03-21
  Author : cfe

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(aobStratacmp,game.dll,0F 86 B1 01 00 00 0F) // should be unique

aobStratacmp:
  db 90 E9
registersymbol(aobStratacmp)

[DISABLE]

aobStratacmp:
  db 0F 86

unregistersymbol(aobStratacmp)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113973</ID>
          <Description>"No Recoil                                                                              (by cfemen)"</Description>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(aobRecoil,game.dll,48 83 EC 18 48 8B 01) // should be unique

aobRecoil:
  db C3
registersymbol(aobRecoil)

[DISABLE]

aobRecoil:
  db 48
unregistersymbol(aobRecoil)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113974</ID>
          <Description>"No Sway                                                                               (by cfemen)"</Description>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : helldivers2.exe
  Version:
  Date   : 2024-12-13
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(aobCalcSway,game.dll,F3 0F 51 C2 EB ? 0F 28 C2 E8 ? ? ? ? F3 44 0F 59 C8) // should be unique

aobCalcSway:
  nop 4

[DISABLE]

aobCalcSway:
  db F3 0F 51 C2

unregistersymbol(aobCalcSway)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113945</ID>
          <Description>"Show All Map Icons                                                              (by cfemen)"</Description>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.27207.0
// MD5 Signature     : 14C848EF74B1A8FEF0AC3DB6E396B3D2
// EXE Compile Date  : January 28, 2025 10:15 AM
// Script Date       : February 04, 2025 06:37 PM
[ENABLE]
aobscanmodule(aob_CheckIsBlipSeen,game.dll,44 0F B6 68 ? F3 0F 59 C2)
aobscanmodule(aob_CheckIfAlienHivesAreObstructed,game.dll,41 80 BC 24 ? ? ? ? ? F2 44 0F 11 65)
aobscanmodule(aob_CheckIfAlienHiveSeen,game.dll, 0F 84 ? ? ? ? 83 7C 24 ? ? 0F 83)
aobscanmodule(aob_CheckIfAlienHiveVisible,game.dll, 75 ? 41 80 BF ? ? ? ? ? 0F 85)
aobscanmodule(aob_CheckIfMinorInterestBlipIsDiscovered,game.dll, 0F 85 ? ? ? ? 48 8B 44 24 ? 80 78)
//aobscanmodule(aob_GetMinorInterestBlipIcon,game.dll, 0F 84 ? ? ? ? 48 8B 54 24 ? F3 42 0F 10 4C EB)
aobscanmodule(aob_CheckMissionBlip,game.dll,0F 85 ? ? ? ? 48 8D BE ? ? ? ? 41 0F 28 CE)
registersymbol(aob_CheckIsBlipSeen)
registersymbol(aob_CheckIfAlienHivesAreObstructed)
registersymbol(aob_CheckIfAlienHiveSeen)
registersymbol(aob_CheckIfMinorInterestBlipIsDiscovered)
registersymbol(aob_CheckMissionBlip)


aob_CheckIsBlipSeen:
  mov r13w,1

aob_CheckIfAlienHiveSeen:
  db 0F 87

aob_CheckIfMinorInterestBlipIsDiscovered:
  db 90 E9

aob_CheckIfAlienHivesAreObstructed+8:
  db 02

aob_CheckIfAlienHiveVisible:
  db EB

aob_CheckMissionBlip:
  db 90 E9

[DISABLE]
aob_CheckIsBlipSeen:
 db 44 0F B6 68 33

aob_CheckIfAlienHiveSeen:
  db 0F 84

aob_CheckIfMinorInterestBlipIsDiscovered:
  db 0F 85

aob_CheckIfAlienHivesAreObstructed+8:
  db 00

aob_CheckIfAlienHiveVisible:
  db 75

aob_CheckMissionBlip:
  db 0F 85

unregistersymbol(aob_CheckMissionBlip)
unregistersymbol(aob_CheckIsBlipSeen)
unregistersymbol(aob_CheckIfAlienHivesAreObstructed)
unregistersymbol(aob_CheckIfAlienHiveSeen)
unregistersymbol(aob_CheckIfAlienHiveVisible)
unregistersymbol(aob_CheckIfMinorInterestBlipIsDiscovered)
unregistersymbol(aob_CheckMissionBlip)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>117529</ID>
          <Description>"Speedhack                                                                           (by cfemen)"</Description>
          <Options moHideChildren="1"/>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">{ Game   : helldivers2.exe
  Version:
  Date   : 2025-05-13
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(AOB_Speed,game.dll,F3 0F 59 4B 78 F3 0F 59 4B 7C 0F 28 D9 F3 0F 5C DC) // should be unique
alloc(newmem,$1000)
alloc(fSpeed,4)
registersymbol(fSpeed)

fSpeed:
db (float)1.25

label(code)
label(return)
label(bFreeze)
registersymbol(bFreeze)
newmem:

code:
  push rcx
  lea rcx,[rsi+70]
  cmp rbx,rcx // TransformArray[0] ?
  je Player
  mov rcx,712947D6712947D6 // Ship
  cmp [r15],rcx
  je Player
  jmp Enemy
Player:
    mov rcx,fSpeed
    mulss xmm1,[rcx]
    mulss xmm1,[rbx+78]
    mulss xmm1,[rbx+7C]
    movaps xmm3,xmm1
    subss xmm3,xmm4
    pop rcx
    jmp return
Enemy:
  pop rcx
  cmp byte ptr[bFreeze],1
  jne short @f
   xorps xmm1,xmm1
  @@:
  mulss xmm1,[rbx+78]
  mulss xmm1,[rbx+7C]
  movaps xmm3,xmm1
  subss xmm3,xmm4
  jmp return
bFreeze:
db 0

AOB_Speed:
  jmp far newmem
  nop 3
return:
registersymbol(AOB_Speed)

[DISABLE]

AOB_Speed:
  db F3 0F 59 4B 78 F3 0F 59 4B 7C 0F 28 D9 F3 0F 5C DC

unregistersymbol(AOB_Speed)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+731947

game.dll+731913: 41 0F 28 F1              - movaps xmm6,xmm9
game.dll+731917: F3 0F 5D F0              - minss xmm6,xmm0
game.dll+73191B: EB 06                    - jmp game.dll+731923
game.dll+73191D: F3 0F 10 7C 24 40        - movss xmm7,[rsp+40]
game.dll+731923: F3 0F 10 4B 70           - movss xmm1,[rbx+70]
game.dll+731928: F3 0F 59 4B 6C           - mulss xmm1,[rbx+6C]
game.dll+73192D: F3 0F 10 A3 80 00 00 00  - movss xmm4,[rbx+00000080]
game.dll+731935: F2 0F 10 2D 03 97 CA 00  - movsd xmm5,[game.dll+13DB040]
game.dll+73193D: F3 0F 59 4B 74           - mulss xmm1,[rbx+74]
game.dll+731942: F3 0F 10 53 30           - movss xmm2,[rbx+30]
// ---------- INJECTING HERE ----------
game.dll+731947: F3 0F 59 4B 78           - mulss xmm1,[rbx+78]
// ---------- DONE INJECTING  ----------
game.dll+73194C: F3 0F 59 4B 7C           - mulss xmm1,[rbx+7C]
game.dll+731951: 0F 28 D9                 - movaps xmm3,xmm1
game.dll+731954: F3 0F 5C DC              - subss xmm3,xmm4
game.dll+731958: 0F 5A C3                 - cvtps2pd xmm0,xmm3
game.dll+73195B: 0F 54 05 7E DC CA 00     - andps xmm0,[game.dll+13DF5E0]
game.dll+731962: 66 0F 2F E8              - comisd xmm5,xmm0
game.dll+731966: 77 20                    - ja game.dll+731988
game.dll+731968: F3 0F 59 D7              - mulss xmm2,xmm7
game.dll+73196C: 44 0F 2F E2              - comiss xmm12,xmm2
game.dll+731970: 76 06                    - jna game.dll+731978
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>117530</ID>
              <Description>"Speed:"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>fSpeed</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>117531</ID>
              <Description>"Freeze Non Player Characters"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
bFreeze:
db 1

 
 
[DISABLE]
bFreeze:
db 0

</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>113966</ID>
          <Description>"Instant Railgun/Arc Ready(outdated)                                                    (by gir489)"</Description>
          <Color>0080FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.25984.0
// MD5 Signature     : F1A0F5136B9035B653BDE0217332B2C8
// EXE Compile Date  : December 06, 2024 11:43 AM
// Script Date       : December 12, 2024 10:40 PM
[ENABLE]
aobscanmodule(aob_RailgunCharge,game.dll, F3 43 0F 11 44 F7 ? 45 84 E4)
registersymbol(aob_RailgunCharge)
assert(aob_RailgunCharge+3F, 45 0F 2F D9)
alloc(newmem,1024)
label(return)

newmem:
  mov [r15+r14*8+4], (float)2.999999
  movss xmm0, [r15+r14*8+4]
  test r12b,r12b
  je far return+2F
  comiss xmm10,xmm9
  jmp far return

aob_RailgunCharge:
  jmp far newmem
  nop 2
return:

[DISABLE]
aob_RailgunCharge:
  db F3 43 0F 11 44 F7 04 45 84 E4 74 33 45 0F 2F D1

unregistersymbol(aob_RailgunCharge)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+58FDB9

game.dll+58FD6C: 0F 85 53 FF FF FF        - jne game.dll+58FCC5
game.dll+58FD72: 41 8B 44 D2 04           - mov eax,[r10+rdx*8+04]
game.dll+58FD77: 83 F8 FF                 - cmp eax,-01
game.dll+58FD7A: 0F 84 45 FF FF FF        - je game.dll+58FCC5
game.dll+58FD80: 8B C8                    - mov ecx,eax
game.dll+58FD82: 49 8B 43 38              - mov rax,[r11+38]
game.dll+58FD86: 8B 3C 88                 - mov edi,[rax+rcx*4]
game.dll+58FD89: E9 3D FF FF FF           - jmp game.dll+58FCCB
game.dll+58FD8E: 3B C3                    - cmp eax,ebx
game.dll+58FD90: 75 AB                    - jne game.dll+58FD3D
game.dll+58FD92: 41 83 7C D2 04 FF        - cmp dword ptr [r10+rdx*8+04],-01
game.dll+58FD98: 74 A3                    - je game.dll+58FD3D
game.dll+58FD9A: 48 8B 74 24 48           - mov rsi,[rsp+48]
game.dll+58FD9F: 8B 56 08                 - mov edx,[rsi+08]
game.dll+58FDA2: E8 49 46 E9 FF           - call game.dll+4243F0
game.dll+58FDA7: 83 F8 05                 - cmp eax,05
game.dll+58FDAA: 41 0F 95 C4              - setne r12b
game.dll+58FDAE: 75 92                    - jne game.dll+58FD42
game.dll+58FDB0: 41 0F 28 C1              - movaps xmm0,xmm9
game.dll+58FDB4: F3 41 0F 58 C7           - addss xmm0,xmm15
// ---------- INJECTING HERE ----------
game.dll+58FDB9: F3 43 0F 11 44 3E 04     - movss [r14+r15+04],xmm0
// ---------- DONE INJECTING  ----------
game.dll+58FDC0: 45 84 E4                 - test r12b,r12b
game.dll+58FDC3: 74 32                    - je game.dll+58FDF7
game.dll+58FDC5: 45 0F 2F D1              - comiss xmm10,xmm9
game.dll+58FDC9: 76 63                    - jna game.dll+58FE2E
game.dll+58FDCB: 41 0F 2F C2              - comiss xmm0,xmm10
game.dll+58FDCF: 72 5D                    - jb game.dll+58FE2E
game.dll+58FDD1: 41 80 BD B8 00 00 00 00  - cmp byte ptr [r13+000000B8],00
game.dll+58FDD9: 74 53                    - je game.dll+58FE2E
game.dll+58FDDB: 80 7C 24 40 00           - cmp byte ptr [rsp+40],00
game.dll+58FDE0: 74 4C                    - je game.dll+58FE2E
game.dll+58FDE2: 48 8B 4D 88              - mov rcx,[rbp-78]
game.dll+58FDE6: 48 8B D6                 - mov rdx,rsi
game.dll+58FDE9: F3 43 0F 11 44 3E 08     - movss [r14+r15+08],xmm0
game.dll+58FDF0: E8 8B 53 EA FF           - call game.dll+435180
game.dll+58FDF5: EB 2E                    - jmp game.dll+58FE25
game.dll+58FDF7: 45 0F 2F D9              - comiss xmm11,xmm9
game.dll+58FDFB: 76 31                    - jna game.dll+58FE2E
game.dll+58FDFD: 41 0F 2F C3              - comiss xmm0,xmm11
game.dll+58FE01: 72 2B                    - jb game.dll+58FE2E
game.dll+58FE03: 80 7C 24 40 00           - cmp byte ptr [rsp+40],00
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113993</ID>
          <Description>"No Laser Overheat                                                                (by gir489)"</Description>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_ImmaChargingMahLasor,game.dll,F3 0F 11 4C A8)
registersymbol(aob_ImmaChargingMahLasor)

aob_ImmaChargingMahLasor+3:
 db 7C

[DISABLE]
aob_ImmaChargingMahLasor+3:
 db 4C

unregistersymbol(aob_ImmaChargingMahLasor)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>117458</ID>
          <Description>"Climb All                                                                               (by sakuno)"</Description>
          <Color>C080FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.xxx
  Date   : 2024-08-25
  Author : (Discord)Sakuno

  This little script allow you to climb up anything can climb.
}
{$lua}
AvatarDataReplacer=decodeFunction('c-n1^!AiqG5QhJ4m$,8MLPb!a=4guigvffyZ8sZw5/CR#QBo61p;1HBs:ciU=F0Bic^DdkMFodp[-6i{Wp:LbH%W{k()qFThce38,arEr@ePEj4vy:#ec[5HC6oo.OJHCvVSx1??dSl[,3:B6.J]:UX,v0erE,QuJE!esNCwi9,Gj(JM((tiZ]1Bfy)C3qB3D$J8p[l_7)XYg@GTq15b$xp#h43GWhg3c:C{3S[Ydh/M[g-ur?4rJ?n4Vc*Ar2-*YJK9RrJW:,w^z2v-!HnOuSuA@9AiTTj_AoIjz;{eIJOjG,P%Y-xB.6U,twn=f')
AvatarDataReplacer()
{$asm}
// X
AvatarClimbAddr:
  dd (float)50.0 // Default 1.95

// Y
AvatarClimbAddr+4:
  dd (float)50.0 // Default 1.40

[DISABLE]
// X
AvatarClimbAddr:
  dd (float)1.95

// Y
AvatarClimbAddr+4:
  dd (float)1.40

unregistersymbol(AvatarClimbAddr)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>117442</ID>
      <Description>"ZoDDel super dmg mod"</Description>
      <Options moHideChildren="1"/>
      <Color>FFFF00</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>113955</ID>
          <Description>"Dmg boost (you have to edit it)                                         (by ZoDDel)"</Description>
          <Options moAlwaysHideChildren="1"/>
          <Color>FFFF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : helldivers2.exe
  Version: 
  Date   : 2024-04-07
  Author : ZoDDeL

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(damageMulti,game.dll,66 0F 6E 59 04 66 0F 6E 49 08 0F 5B C9 0F 5B DB) // should be unique
alloc(dmg_newmem,$2000)

label(dmg_code)
label(dmg_return)

dmg_newmem:
  cmp [rcx+04],#0 // skip any 0 dmg weapons like smoke or unknown shit
  je dmg_code


  //  // whitelisted weapons that get super damage
  cmp [rcx+00], #88 // AR-23 Liberator / AR-22C Patriot / AR-48 Truth Whisperer / M-105 Stalwart / AR-61 Tenderizer / Guard Dog
    je dmg_Machinegun
  cmp [rcx+00], #87 // AR-23 Liberator / AR-22C Patriot / AR-48 Truth Whisperer / M-105 Stalwart / AR-61 Tenderizer / Guard Dog
    je dmg_Machinegun
  cmp [rcx+00], #112 // AR-MA5C5
    je dmg_Machinegun

  cmp [rcx+00], #118 // R-63CS Diligence Counter Sniper
    je dmg_RegularSniper
  cmp [rcx+00], #115 // R-6 Deaddeye
    je dmg_RegularSniper
  cmp [rcx+00], #260 // Plas-39 Projectile
    je dmg_Pistol
  cmp [rcx+00], #261 // Plas-39 Explosion
    je dmg_code
  cmp [rcx+00], #172 // anti material rifle
    je dmg_Sniper

  cmp [rcx+00], #58 // Knight
    je dmg_Pistol
  cmp [rcx+00], #55 // Knight
    je dmg_Pistol

  cmp [rcx+00], #149 // SG-225SP Breaker Spray&amp;Pray
    je dmg_Shotgun
  cmp [rcx+00], #131 // SG-M90A
    je dmg_Shotgun

  cmp [rcx+00], #75 // P-113 Verdict
    je dmg_Pistol
  cmp [rcx+00], #76 // P-M6C/Socom
    je dmg_Pistol
  cmp [rcx+00], #80 // P-4 Senator revolver
    je dmg_Pistol
  cmp [rcx+00], #134 // SG-22 Bushwack &amp; SG-8 Punisher
    je dmg_Shotgun

  cmp [rcx+00], #525 // K-2 Throwing knife
    je dmg_Oneshot

  cmp [rcx+00], #163 // ARC-3 Arc Thrower
    je dmg_Arc
  cmp [rcx+00], #165 // ARC-12 Blitzer
    je dmg_Arc
  cmp [rcx+00], #420 // LAS-98
    je dmg_Arc

  cmp [rcx+00], #358 // Hellpod impact damage
    je dmg_Oneshot
  cmp [rcx+00], #359 // Hellpod impact fire damage
    je dmg_Oneshot
  cmp [rcx+00], #360 // Hellpod impact stun damage
    je dmg_Oneshot

  cmp [rcx+00], #451 // Helldiver melee
    je dmg_Melee
  cmp [rcx+00], #457 // Helldiver melee Muscle Enhaced
    je dmg_Melee
  cmp [rcx+00], #459 // CQC-19 Stunning Spear
    je dmg_Melee
  cmp [rcx+00], #460 // CQC-30 Stunning Baton
    je dmg_Melee
  cmp [rcx+00], #453 // CQC-5 Combat axe
    je dmg_Melee
  cmp [rcx+00], #455 // CQC-42 Machete
    je dmg_Melee
  cmp [rcx+00], #454 // CQC-2 Saber
    je dmg_Melee
  cmp [rcx+00], #456 // Shovel Melee Attack
    je dmg_Melee
  cmp [rcx+00], #459 // ONE TRUE FLAG
    je dmg_Melee
  cmp [rcx+00], #519 // This is Democrazy emote
    je dmg_Melee


  cmp [dmg_toggle_enemyORdefault],#1
  je dmg_Enemy
  jmp dmg_code


// player global order from damage to stagger
dmg_RegularSniper:
  //mov [rcx+0C],#777 // writes penetration value 1
  //mov [rcx+10],#777 // writes penetration value 2
  //mov [rcx+14],#50 // writes penetration value 3
  //mov [rcx+18],#50 // writes penetration value 4
  //mov [rcx+1C],#40 // writes demolition value
  mov [rcx+20],#19 // writes pushback / stagger value
  //mov [rcx+24],#100 // writes ??? value
  movd xmm3,[rcx+04]
  movd xmm1,[rcx+08]
  cvtdq2ps xmm1,xmm1
  cvtdq2ps xmm3,xmm3
  mulss xmm3, dword ptr [triple_dmg]  // multiplies value with dmg_multiplier
  mulss xmm1, dword ptr [armordmg_multiplier] // multiplies value with admg_multiplier
  jmp dmg_check

dmg_Sniper:
  mov [rcx+0C],#777 // writes penetration value 1
  mov [rcx+10],#777 // writes penetration value 2
  mov [rcx+14],#50 // writes penetration value 3
  mov [rcx+18],#50 // writes penetration value 4
  //mov [rcx+1C],#40 // writes demolition value
  mov [rcx+20],#29 // writes pushback / stagger value
  //mov [rcx+24],#100 // writes ??? value
  movd xmm3,[rcx+04]
  movd xmm1,[rcx+08]
  cvtdq2ps xmm1,xmm1
  cvtdq2ps xmm3,xmm3
  mulss xmm3, dword ptr [double_dmg]  // multiplies value with dmg_multiplier
  mulss xmm1, dword ptr [armordmg_multiplier] // multiplies value with admg_multiplier
  jmp dmg_check

dmg_Shotgun:
  mov [rcx+0C],#777 // writes penetration value 1
  mov [rcx+10],#777 // writes penetration value 2
  mov [rcx+14],#777 // writes penetration value 3
  mov [rcx+18],#777 // writes penetration value 4
  mov [rcx+1C],#0 // writes demolition value
  //mov [rcx+20],#50 // writes pushback / stagger value
  //mov [rcx+24],#100 // writes ??? value
  movd xmm3,[rcx+04]
  movd xmm1,[rcx+08]
  cvtdq2ps xmm1,xmm1
  cvtdq2ps xmm3,xmm3
  mulss xmm3, dword ptr [double_dmg]  // multiplies value with dmg_multiplier
  mulss xmm1, dword ptr [armordmg_multiplier] // multiplies value with admg_multiplier
  jmp dmg_check

dmg_Pistol:
  //mov [rcx+0C],#777 // writes penetration value 1
  //mov [rcx+10],#777 // writes penetration value 2
  //mov [rcx+14],#777 // writes penetration value 3
  //mov [rcx+18],#777 // writes penetration value 4
  //mov [rcx+1C],#0 // writes demolition value
  //mov [rcx+20],#5 // writes pushback / stagger value
  //mov [rcx+24],#100 // writes ??? value
  movd xmm3,[rcx+04]
  movd xmm1,[rcx+08]
  cvtdq2ps xmm1,xmm1
  cvtdq2ps xmm3,xmm3
  mulss xmm3, dword ptr [double_dmg]  // multiplies value with dmg_multiplier
  mulss xmm1, dword ptr [armordmg_multiplier] // multiplies value with admg_multiplier
  jmp dmg_check

dmg_Arc:
  //mov [rcx+0C],#777 // writes penetration value 1
  //mov [rcx+10],#777 // writes penetration value 2
  //mov [rcx+14],#777 // writes penetration value 3
  //mov [rcx+18],#777 // writes penetration value 4
  //mov [rcx+1C],#0 // writes demolition value
  mov [rcx+20],#29 // writes pushback / stagger value
  //mov [rcx+24],#100 // writes ??? value
  movd xmm3,[rcx+04]
  movd xmm1,[rcx+08]
  cvtdq2ps xmm1,xmm1
  cvtdq2ps xmm3,xmm3
  mulss xmm3, dword ptr [double_dmg]  // multiplies value with dmg_multiplier
  mulss xmm1, dword ptr [armordmg_default] // multiplies value with admg_multiplier
  jmp dmg_check

dmg_Machinegun:
  mov [rcx+0C],#777 // writes penetration value 1
  mov [rcx+10],#777 // writes penetration value 2
  mov [rcx+14],#777 // writes penetration value 3
  mov [rcx+18],#777 // writes penetration value 4
  //mov [rcx+1C],#0 // writes demolition value
  //mov [rcx+20],#5 // writes pushback / stagger value
  //mov [rcx+24],#100 // writes ??? value
  movd xmm3,[rcx+04]
  movd xmm1,[rcx+08]
  cvtdq2ps xmm1,xmm1
  cvtdq2ps xmm3,xmm3
  mulss xmm3, dword ptr [machinegun_dmg_multiplier]  // multiplies value with dmg_multiplier
  mulss xmm1, dword ptr [armordmg_multiplier] // multiplies value with admg_multiplier
  jmp dmg_check

dmg_Melee:
  mov [rcx+0C],#50 // writes penetration value 1
  mov [rcx+10],#50 // writes penetration value 2
  mov [rcx+14],#50 // writes penetration value 3
  mov [rcx+18],#50 // writes penetration value 4
  mov [rcx+1C],#29 // writes demolition value 29
  mov [rcx+20],#50 // writes pushback / stagger value 29
  //mov [rcx+24],#100 // writes ??? value
  movd xmm3,[rcx+04]
  movd xmm1,[rcx+08]
  cvtdq2ps xmm1,xmm1
  cvtdq2ps xmm3,xmm3
  mulss xmm3, dword ptr [dmg_multiplier_oneshot]  // multiplies value with dmg_multiplier
  mulss xmm1, dword ptr [armordmg_multiplier] // multiplies value with admg_multiplier
  jmp dmg_check

dmg_Oneshot:
  //mov [rcx+0C],#777 // writes penetration value 1
  //mov [rcx+10],#777 // writes penetration value 2
  //mov [rcx+14],#777 // writes penetration value 3
  //mov [rcx+18],#777 // writes penetration value 4
  //mov [rcx+1C],#50 // writes demolition value
  //mov [rcx+20],#50 // writes pushback / stagger value
  //mov [rcx+24],#100 // writes ??? value
  movd xmm3,[rcx+04]
  movd xmm1,[rcx+08]
  cvtdq2ps xmm1,xmm1
  cvtdq2ps xmm3,xmm3
  mulss xmm3, dword ptr [dmg_multiplier_oneshot]  // multiplies value with dmg_multiplier
  mulss xmm1, dword ptr [armordmg_multiplier] // multiplies value with admg_multiplier
  jmp dmg_check

dmg_FireHellpod:
  //mov [rcx+0C],#777 // writes penetration value 1
  //mov [rcx+10],#777 // writes penetration value 2
  //mov [rcx+14],#777 // writes penetration value 3
  //mov [rcx+18],#777 // writes penetration value 4
  //mov [rcx+1C],#50 // writes demolition value
  //mov [rcx+20],#50 // writes pushback / stagger value
  //mov [rcx+24],#100 // writes ??? value
  movd xmm3,[rcx+04]
  movd xmm1,[rcx+08]
  cvtdq2ps xmm1,xmm1
  cvtdq2ps xmm3,xmm3
  mulss xmm3, dword ptr [double_dmg]  // multiplies value with dmg_multiplier
  mulss xmm1, dword ptr [armordmg_multiplier] // multiplies value with admg_multiplier
  jmp dmg_check

dmg_check:
  comiss xmm3, dword ptr [dmg_limit] // checks if dmg after multiplier is above dmg_limit
  ja dmg_cap
  comiss xmm1, dword ptr [dmg_limit] // checks if admg after multiplier is above dmg_limit
  ja dmg_cap
  jmp dmg_return

dmg_cap:
  movss xmm3, dword ptr [dmg_limit] // writes dmg_limit value
  movss xmm1, dword ptr [dmg_limit] // writes dmg_limit value
  jmp dmg_return

dmg_Enemy:
  //mov [rcx+0C],#0 // writes penetration value 1
  //mov [rcx+10],#0 // writes penetration value 2
  //mov [rcx+14],#0 // writes penetration value 3
  //mov [rcx+18],#0 // writes penetration value 4
  //mov [rcx+1C],#0 // writes demolition value //
  //mov [rcx+20],#0 // writes pushback / stagger value
  //mov [rcx+24],#0 // writes ??? value
  movd xmm3,[rcx+04]
  movd xmm1,[rcx+08]
  cvtdq2ps xmm1,xmm1
  cvtdq2ps xmm3,xmm3
  mulss xmm3, dword ptr [enemydmg_multiplier]
  mulss xmm1, dword ptr [admg_multiplier_fall]
  jmp dmg_return

dmg_code:
  movd xmm3,[rcx+04]
  movd xmm1,[rcx+08]
  cvtdq2ps xmm1,xmm1
  cvtdq2ps xmm3,xmm3
  jmp dmg_return

triple_dmg:
  dd (float)3  // edit this for times x base damage (1 is default)

double_dmg:
  dd (float)2  // edit this for times x base damage (1 is default)

machinegun_dmg_multiplier:
  dd (float)1.5  // edit this for times x base damage (1 is default)

dmg_multiplier_oneshot:
  dd (float)20  // edit this for times x base damage (1 is default)

dmg_multiplier_fall:
  dd (float)0.1  // edit this for times x base damage (1 is default)

admg_multiplier_fall:
  dd (float)0.0  // edit this for times x base damage (1 is default)

armordmg_multiplier:
  dd (float)2  // edit this for times x armor/limb damage (1 is default)

armordmg_default:
  dd (float)1  // edit this for times x armor/limb damage (1 is default)

enemydmg_multiplier:
  dd (float)0.75  // edit this for times x enemy damage (1 is default)

dmg_limit:
  dd (float)7000 // limit the super damage to prevent creating weapons that would outdamage inf health

dmg_toggle_enemyORdefault:
  dd #1


damageMulti:
  jmp far dmg_newmem
  nop 2
dmg_return:

registersymbol(damageMulti)
registersymbol(dmg_toggle_enemyORdefault)


[DISABLE]

damageMulti:
  db 66 0F 6E 59 04 66 0F 6E 49 08 0F 5B C9 0F 5B DB

unregistersymbol(damageMulti)
unregistersymbol(dmg_toggle_enemyORdefault)
dealloc(dmg_newmem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>113956</ID>
              <Description>"unknown weapon ID = enemy / default"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">1:enemy
0:default
</DropDownList>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>dmg_toggle_enemyORdefault</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>117435</ID>
          <Description>"Check your favourite weapons IDs here!!!                           (by Rei &amp; fallout1170)"</Description>
          <Options moAlwaysHideChildren="1"/>
          <Color>FFFF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : helldivers2.exe
  Version: 
  Date   : 2024-04-07
  Author : ZoDDeL

  This script does blah blah blah
}

//If your ID doesn´t work or is missing check it here
//(https://docs.google.com/spreadsheets/d/1Kc0RSe5YgQ2cgd7oTSqcHY_FtFjlYK7Lv93bFvujtbg/edit?gid=0#gid=0)

[ENABLE]


aobscanmodule(damageMulti,game.dll,66 0F 6E 59 04 66 0F 6E 49 08 0F 5B C9 0F 5B DB) // should be unique
alloc(dmg_newmem,$2000)

label(dmg_code)
label(dmg_return)

dmg_newmem:
  cmp [rcx+04],#0 // skip any 0 dmg weapons like smoke or unknown shit
  je dmg_code

  //Hellpod

  cmp [rcx+00], #358 // Hellpod Impact
    je dmg_code
  cmp [rcx+00], #359 // Hellpod Fire Impact
    je dmg_code
  cmp [rcx+00], #360 // Hellpod Stun Impact
    je dmg_code

  //Assault rifles

  cmp [rcx+00], #88 // AR-23 Liberator
    je dmg_code
  cmp [rcx+00], #85 // AR-23P Liberator Penetrator
    je dmg_code
  cmp [rcx+00], #87 // AR-23C Liberator Concussive
    je dmg_code
  cmp [rcx+00], #96 // AR-32 Pacifier
    je dmg_code
  cmp [rcx+00], #97 // AR-2 Coyote
    je dmg_code
  cmp [rcx+00], #112 // AR-MA5C5
    je dmg_code
  cmp [rcx+00], #88 // AR StA-52
    je dmg_code
  cmp [rcx+00], #88 // AR-23A Liberator Carabine
    je dmg_code
  cmp [rcx+00], #111 // AR-61 Tenderizer
    je dmg_code
  cmp [rcx+00], #110 // BR-14 Adjudicator
    je dmg_code

  //Sniper rifle

  cmp [rcx+00], #114 // R-2 Amendment
    je dmg_code
  cmp [rcx+00], #113 // R-2124 Constitution
    je dmg_code
  cmp [rcx+00], #115 // R-6 Deaddeye
    je dmg_code
  cmp [rcx+00], #117 // R-63 Diligence
    je dmg_code
  cmp [rcx+00], #118 // R-63CS Diligence Counter Sniper
    je dmg_code
  cmp [rcx+00], #172 // Anti material rifle
    je dmg_code
  cmp [rcx+00], #110 // AR-20L Justice
    je dmg_code

  //Submachine guns

  cmp [rcx+00], #58 // MP-98 Knight
    je dmg_code
  cmp [rcx+00], #58 // SMG StA-11
    je dmg_code
  cmp [rcx+00], #55 // SMG M7S
    je dmg_code
  cmp [rcx+00], #78 // SMG-32 Reprimand
    je dmg_code
  cmp [rcx+00], #67 // SMG-37 Defender
    je dmg_code
  cmp [rcx+00], #74 // SMG-72 Pummeler
    je dmg_code

  //Shotgun

  cmp [rcx+00], #134 // SG-8 Punisher
    je dmg_code
  cmp [rcx+00], #147 // SG-8S Slugger
    je dmg_code
  cmp [rcx+00], #137 // SG-20 Halt (fletchette)
    je dmg_code
  cmp [rcx+00], #146 // SG-20 Halt stun)
    je dmg_code
  cmp [rcx+00], #135 // SG-451 Cookout
    je dmg_code
  cmp [rcx+00], #131 // SG-M90A
    je dmg_code
  cmp [rcx+00], #150 // SG-225 Breaker
    je dmg_code
  cmp [rcx+00], #149 // SG-225SP Breaker Spray&amp;Pray
    je dmg_code
  cmp [rcx+00], #153 // SG-225IE Breaker Incendiary
    je dmg_code
  //cmp [rcx+00], #152 // SG-225NS Breaker Nailspitter
  //  je dmg_code
  cmp [rcx+00], #140 // Projectile_Break-Action Shotgun
    je dmg_code

  //Explosive

  cmp [rcx+00], #174 // CB-9 explosive crossbow Projectile
    je dmg_code
  cmp [rcx+00], #175 // CB-9 explosive crossbow Explosion
    je dmg_code
  cmp [rcx+00], #159 // R-36 Eruptor Shrapnel
    je dmg_code
  cmp [rcx+00], #124 // R-36 Eruptor Projectile
    je dmg_code
  cmp [rcx+00], #297 // R-36 Eruptor Explosion
    je dmg_code

  //Energy-based

  cmp [rcx+00], #43 // SG-8P Punisher Plasma Projectile
    je dmg_code
  cmp [rcx+00], #263 // SG-8P Punisher Plasma Explosion
    je dmg_code
  cmp [rcx+00], #260 // Plas-39 Accelerator rifle Projectile
    je dmg_code
  cmp [rcx+00], #261 // Plas-39 Accelerator rifle Explosion
    je dmg_code
  cmp [rcx+00], #165 // ARC-12 Blitzer
    je dmg_code
  cmp [rcx+00], #415 // LAS-5 Scythe
    je dmg_code
  cmp [rcx+00], #37 // LAS-16 Sickle
    je dmg_code
  cmp [rcx+00], #38 // LAS-17 Double-Edged Sickle
    je dmg_code
  cmp [rcx+00], #39 // LAS-17 Double-Edged Sickle
    je dmg_code
  cmp [rcx+00], #40 // LAS-17 Double-Edged Sickle
    je dmg_code
  cmp [rcx+00], #43 // PLAS-1 Scorcher Projectile
    je dmg_code
  cmp [rcx+00], #258 // PLAS-1 Scorcher Explosion
    je dmg_code
  cmp [rcx+00], #50 // PLAS-101 Purifier bullet
    je dmg_code
  cmp [rcx+00], #264 // PLAS-101 Purifier min charge
    je dmg_code
  cmp [rcx+00], #265 // PLAS-101 Purifier max charge
    je dmg_code

  //Special

  cmp [rcx+00], #60 // VG-70 Variable
    je dmg_code
  cmp [rcx+00], #13 // FLAM-66 Torcher flame rifle Impact
    je dmg_code
  cmp [rcx+00], #128 // JAR-5 Dominator
    je dmg_code

  //Pistol

  cmp [rcx+00], #77 // P-92 Warrant
    je dmg_code
  cmp [rcx+00], #59 // P-2 Peacemaker
    je dmg_code
  cmp [rcx+00], #57 // P-19 Redeemer
    je dmg_code
  cmp [rcx+00], #75 // P-113 Verdict
    je dmg_code
  cmp [rcx+00], #76 // P-M6C/Socom
    je dmg_code
  cmp [rcx+00], #80 // P-4 Senator
    je dmg_code

  //Melee

  cmp [rcx+00], #451 // Helldiver melee
    je dmg_code
  cmp [rcx+00], #457 // Helldiver melee Muscle Enhaced
    je dmg_code
  cmp [rcx+00], #459 // CQC-19 Stunning Spear
    je dmg_code
  cmp [rcx+00], #454 // CQC-2 Saber
    je dmg_code
  cmp [rcx+00], #460 // CQC-30 Stunning Baton
    je dmg_code
  cmp [rcx+00], #453 // CQC-5 Combat axe
    je dmg_code
  cmp [rcx+00], #455 // CQC-42 Machete
    je dmg_code
  cmp [rcx+00], #459 // ONE TRUE FLAG
    je dmg_code
  cmp [rcx+00], #456 // Shovel Melee Attack
    je dmg_code
  cmp [rcx+00], #458 // Helldiver Bayonet
    je dmg_code
  cmp [rcx+00], #519 // This is Democrazy emote
    je dmg_code
  cmp [rcx+00], #400 // LIFT-182 Tp backpack black hole orb
    je dmg_code
  cmp [rcx+00], #401 // LIFT-182 Tp backpack overload explosion
    je dmg_code

  //Special

  //cmp [rcx+00], #? // P-11 Stims Pistol
  //  je dmg_code
  cmp [rcx+00], #134 // SG-22 Bushwack
    je dmg_code
  cmp [rcx+00], #41 // LAS-58 Talon
    je dmg_code
  cmp [rcx+00], #14 // P-72 Crisper
    je dmg_code
  cmp [rcx+00], #186 // GP-31 grenade pistol Projectile
    je dmg_code
  cmp [rcx+00], #318 // GP-31 grenade pistol Explosion
    je dmg_code
  cmp [rcx+00], #414 // LAS-7 Dagger
    je dmg_code
  cmp [rcx+00], #24 // GP-31 Ultimatum Impact
    je dmg_code
  cmp [rcx+00], #372 // GP-31 Ultimatum Explosion
    je dmg_code
  cmp [rcx+00], #42 // PLAS-15 Projectile Min
    je dmg_code
  cmp [rcx+00], #49 // PLAS-15 Projectile Max
    je dmg_code
  cmp [rcx+00], #266 // PLAS-15 Explosion Min
    je dmg_code
  cmp [rcx+00], #267 // PLAS-15 Explosion Max
    je dmg_code

  //Grenades

  cmp [rcx+00], #309 // TED-63 Dynamite
    je dmg_code
  cmp [rcx+00], #287 // G-6 Frag
    je dmg_code
  cmp [rcx+00], #288 // G-7 Pineapple Explosion 1 Explosion
    je dmg_code
  cmp [rcx+00], #289 // G-7 Pineapple Explosion 1 Shrapnel
    je dmg_code
  cmp [rcx+00], #306 // G-12 High Explosive
    je dmg_code
  cmp [rcx+00], #290 // G-10 Incendiary Impact
    je dmg_code
  cmp [rcx+00], #427 // G-10 Incendiary Fire
    je dmg_code
  cmp [rcx+00], #178 // G-31 ARC ARC
    je dmg_code
  cmp [rcx+00], #310 // G-31 ARC Explosion
    je dmg_code
  cmp [rcx+00], #307 // G-16 Impact
    je dmg_code
  cmp [rcx+00], #291 // G-13 Incendiary Impact Impact
    je dmg_code
  cmp [rcx+00], #427 // G-13 Incendiary Impact Fire
    je dmg_code
  cmp [rcx+00], #235 // G-23 Stun
    je dmg_code
  cmp [rcx+00], #375 // G-4 Gas Grenade Impact
    je dmg_code
  cmp [rcx+00], #438 // G-4 Gas Grenade Gas
    je dmg_code
  cmp [rcx+00], #307 // G-50 Seeker Drone
    je dmg_code
  //cmp [rcx+00], #? // G-3 Smoke
  //  je dmg_code
  cmp [rcx+00], #428 // G-123 Thermite (burn)
    je dmg_code
  cmp [rcx+00], #236 // G-109 Urchin
    je dmg_code
  cmp [rcx+00], #525 // K-2 Throwing knife
    je dmg_code
  cmp [rcx+00], #21 // G-142 Pyrotech Speen
    je dmg_code
  cmp [rcx+00], #22 // G-142 Pyrotech Explosion
    je dmg_code

  //EXOs

  cmp [rcx+00], #104 // EXO-45 Gatling
    je dmg_code
  cmp [rcx+00], #200 // EXO-45 rocket Projectile
    je dmg_code
  cmp [rcx+00], #332 // EXO-45 rocket Explosion
    je dmg_code
  cmp [rcx+00], #181 // Emancipator exo gun Projectile
    je dmg_code
  cmp [rcx+00], #315 // Emancipator exo gun Explosion
    je dmg_code

  //Machine guns

  cmp [rcx+00], #104 // MG-43
    je dmg_code
  cmp [rcx+00], #88 // M-105 Stalwart
    je dmg_code
  cmp [rcx+00], #171 // MG-206 HMG
    je dmg_code

  //Flame thrower

  cmp [rcx+00], #12 // FLAM-40 Projectile
    je dmg_code
  cmp [rcx+00], #13 // FLAM-66 Torcher
    je dmg_code
  cmp [rcx+00], #427 // Flamethrower ground fire
    je dmg_code

  //Gas

  cmp [rcx+00], #25 // TX-41 Sterilizer
    je dmg_code

  //Rocket launchers

  cmp [rcx+00], #52 // S-11 Speargun 1 Impact
    je dmg_code
  cmp [rcx+00], #53 // S-11 Speargun 2 Gas
    je dmg_code
  cmp [rcx+00], #188 // EAT-17 Projectile
    je dmg_code
  cmp [rcx+00], #324 // EAT-17 Explosion
    je dmg_code
  cmp [rcx+00], #230 // EAT-700 Expendable Napalm Launcher Impact
    je dmg_code
  cmp [rcx+00], #268 // EAT-700 Expendable Napalm Launcher Explosion
    je dmg_code
  cmp [rcx+00], #232 // EAT-700 Expendable Napalm Launcher Cluster
    je dmg_code
  cmp [rcx+00], #189 // GR-8 recoil-less rifle (regular) Projectile
    je dmg_code
  cmp [rcx+00], #323 // GR-8 recoil-less rifle (regular) Explosion
    je dmg_code
  cmp [rcx+00], #168 // AC-8 Autocannon (flak) 1 impact
    je dmg_code
  cmp [rcx+00], #179 // AC-8 Autocannon Projectile
    je dmg_code
  cmp [rcx+00], #314 // AC-8 Autocannon Explosion
    je dmg_code
  cmp [rcx+00], #322 // RL-77 airburst rocket launcher Projectile
    je dmg_code
  cmp [rcx+00], #287 // RL-77 airburst rocket launcher MiniCluster
    je dmg_code
  cmp [rcx+00], #233 // RL-77 airburst rocket launcher Cluster
    je dmg_code
  cmp [rcx+00], #193 // MLS-4X Commando Projectile
    je dmg_code
  cmp [rcx+00], #330 // MLS-4X Commando Explosion
    je dmg_code
  cmp [rcx+00], #51 // RS-422 railgun Safe
    je dmg_code
  cmp [rcx+00], #54 // RS-422 railgun Safe
    je dmg_code
  cmp [rcx+00], #301 // Railgun Overcharge Explosion
    je dmg_code
  cmp [rcx+00], #203 // FAF-14 Spear 1 shell
    je dmg_code
  cmp [rcx+00], #335 // FAF-14 Spear 2 Explosion
    je dmg_code
  cmp [rcx+00], #202 // WASP Impact
    je dmg_code
  cmp [rcx+00], #335 // WASP Explopsion
    je dmg_code
  cmp [rcx+00], #205 // Stinger Projectile
    je dmg_code
  cmp [rcx+00], #338 // Stinger Explosion
    je dmg_code
  cmp [rcx+00], #27 // GL-21 Grenade Launcher Projectile
    je dmg_code
  cmp [rcx+00], #318 // GL-21 Grenade Launcher Explosion
    je dmg_code
  //cmp [rcx+00], #? // Stun grenade launcher
  //  je dmg_code
  cmp [rcx+00], #293 // Incendiary grenade launcher
    je dmg_code
  cmp [rcx+00], #325 // LAS-99 quasar Projectile
    je dmg_code
  cmp [rcx+00], #326 // LAS-99 quasar Explosion
    je dmg_code
  cmp [rcx+00], #27 // GL-52 De-Escalator Impact
    je dmg_code
  cmp [rcx+00], #167 // GL-52 De-Escalator ARC
    je dmg_code
  cmp [rcx+00], #311 // GL-52 De-Escalator Explosion
    je dmg_code
  cmp [rcx+00], #45 // PLAS-45 Epoch Plasma Cannon 1 Impact min charge
    je dmg_code
  cmp [rcx+00], #46 // PLAS-45 Epoch Plasma Cannon 1 Impact max charge
    je dmg_code
  cmp [rcx+00], #47 // PLAS-45 Epoch Plasma Cannon 2 Impact min charge
    je dmg_code
  cmp [rcx+00], #48 // PLAS-45 Epoch Plasma Cannon 2 Impact max charge
    je dmg_code

  //Laser

  cmp [rcx+00], #420 // LAS-98
    je dmg_code
  cmp [rcx+00], #163 // ARC-3 Arc Thrower
    je dmg_code

  //Orbital Canons

  cmp [rcx+00], #184 // Orbital gatling barrage Projectile
    je dmg_code
  cmp [rcx+00], #312 // Orbital gatling barrage Explosion
    je dmg_code
  cmp [rcx+00], #328 // Orbital airburst Strike Projectile
    je dmg_code
  cmp [rcx+00], #160 // Orbital airburst Strike Shrapnel
    je dmg_code
  cmp [rcx+00], #219 // Orbital 120MM HE barrage Projectile
    je dmg_code
  cmp [rcx+00], #373 // Orbital 120MM HE barrage Explosion
    je dmg_code
  cmp [rcx+00], #220 // Orbital 380MM HE barrage Projectile
    je dmg_code
  cmp [rcx+00], #373 // Orbital 380MM HE barrage Explosion
    je dmg_code
  cmp [rcx+00], #373 // Orbital walking impact
    je dmg_code
  cmp [rcx+00], #423 // Orbital Laser
    je dmg_code
  cmp [rcx+00], #221 // Orbital Napalm Barrage Impact
    je dmg_code
  cmp [rcx+00], #222 // Orbital Napalm Barrage Explosion
    je dmg_code
  cmp [rcx+00], #223 // Orbital railcannon Projectile
    je dmg_code
  cmp [rcx+00], #372 // Orbital railcannon Explosion
    je dmg_code

  //Hangar

  cmp [rcx+00], #184 // Eagle strafing run Projectile
    je dmg_code
  cmp [rcx+00], #312 // Eagle strafing run Explosion
    je dmg_code
  cmp [rcx+00], #353 // Eagle Airstrike Projectile
    je dmg_code
  cmp [rcx+00], #355 // Eagle Airstrike Explosion
    je dmg_code
  cmp [rcx+00], #160 // Eagle Clusterbomb Projectile
    je dmg_code
  cmp [rcx+00], #328 // Eagle Clusterbomb Explosion
    je dmg_code
  cmp [rcx+00], #330 // Napalm SEAF/Eagle Explosion
    je dmg_code
  cmp [rcx+00], #433 // Napalm SEAF/Eagle heavy burn
    je dmg_code
  //cmp [rcx+00], #? // Eagle smoke
  //  je dmg_code
  cmp [rcx+00], #206 // Eagle 110MM rocket Projectile
    je dmg_code
  cmp [rcx+00], #340 // Eagle 110MM rocket Explosion
    je dmg_code
  cmp [rcx+00], #353 // 500KG bomb Projectile
    je dmg_code
  cmp [rcx+00], #380 // 500KG Bomb Explosion
    je dmg_code

  //Bridge

  cmp [rcx+00], #220 // Orbital precison strike Projectile
    je dmg_code
  cmp [rcx+00], #372 // Orbital precison strike Explosion
    je dmg_code
  cmp [rcx+00], #218 // Orbital Gas Impact
    je dmg_code
  cmp [rcx+00], #374 // Orbital Gas Explosion
    je dmg_code
  cmp [rcx+00], #438 // Orbital Gas
    je dmg_code
  //cmp [rcx+00], #? // Orbital ems Projectile
  //  je dmg_code
  cmp [rcx+00], #379 // Orbital ems Explosion
    je dmg_code
  //cmp [rcx+00], #? // Orbital smoke
  //  je dmg_code

  //Turrets

  cmp [rcx+00], #170 // HMG Emplacement
    je dmg_code
  cmp [rcx+00], #177 // Tesla tower
    je dmg_code
  cmp [rcx+00], #104 // Gatling Turret
    je dmg_code
  cmp [rcx+00], #192 // Mortar turret Projectile
    je dmg_code
  cmp [rcx+00], #321 // Mortar turret Explosion
    je dmg_code
  cmp [rcx+00], #182 // Autocannon Sentry Projectile
    je dmg_code
  cmp [rcx+00], #317 // Autocannon sentry Explosion
    je dmg_code
  cmp [rcx+00], #193 // Rocket sentry turret Projectile
    je dmg_code
  cmp [rcx+00], #338 // Rocket sentry turret Explosion
    je dmg_code
  cmp [rcx+00], #379 // A/M-23 EMS Mortar Sentry Explosion
    je dmg_code
  cmp [rcx+00], #382 // Mini Missile Silo 2 impact
    je dmg_code
  cmp [rcx+00], #381 // Mini Missile Silo 2 explosion
    je dmg_code

  //Mines

  cmp [rcx+00], #343 // Anti personnel mines
    je dmg_code
  cmp [rcx+00], #343 // Incendiary mines Explosion
    je dmg_code
  cmp [rcx+00], #344 // Anti tank mines
    je dmg_code

  //Guard dogs

  cmp [rcx+00], #416 // LAS-5 "Guard Dog" Rover
    je dmg_code
  cmp [rcx+00], #85 // Rifle "Guard Dog" Rover
    je dmg_code
  cmp [rcx+00], #26 // AX/TX-13 Guard Dog "Dog Breath"
    je dmg_code
  cmp [rcx+00], #166 // K-9 Guard Dog
    je dmg_code

  cmp [rcx+00], #400 // Hellbomb / SEAF Mini-Nuke
    je dmg_code


  cmp [dmg_toggle_enemyORdefault],#1
  je dmg_Enemy
  jmp dmg_code


// player global order from damage to stagger
yourdmgfunction:
  mov [rcx+0C],#777 // writes penetration value 1
  mov [rcx+10],#777 // writes penetration value 2
  mov [rcx+14],#50 // writes penetration value 3
  mov [rcx+18],#50 // writes penetration value 4
  mov [rcx+1C],#40 // writes demolition value
  mov [rcx+20],#19 // writes pushback / stagger value
  //mov [rcx+24],#100 // writes ??? value
  movd xmm3,[rcx+04]
  movd xmm1,[rcx+08]
  cvtdq2ps xmm1,xmm1
  cvtdq2ps xmm3,xmm3
  mulss xmm3, dword ptr [triple_dmg]  // multiplies value with dmg_multiplier
  mulss xmm1, dword ptr [armordmg_multiplier] // multiplies value with admg_multiplier
  jmp dmg_check

dmg_check:
  comiss xmm3, dword ptr [dmg_limit] // checks if dmg after multiplier is above dmg_limit
  ja dmg_cap
  comiss xmm1, dword ptr [dmg_limit] // checks if admg after multiplier is above dmg_limit
  ja dmg_cap
  jmp dmg_return

dmg_cap:
  movss xmm3, dword ptr [dmg_limit] // writes dmg_limit value
  movss xmm1, dword ptr [dmg_limit] // writes dmg_limit value
  jmp dmg_return

dmg_Enemy:
  //mov [rcx+0C],#0 // writes penetration value 1
  //mov [rcx+10],#0 // writes penetration value 2
  //mov [rcx+14],#0 // writes penetration value 3
  //mov [rcx+18],#0 // writes penetration value 4
  //mov [rcx+1C],#0 // writes demolition value //
  //mov [rcx+20],#0 // writes pushback / stagger value
  //mov [rcx+24],#0 // writes ??? value
  movd xmm3,[rcx+04]
  movd xmm1,[rcx+08]
  cvtdq2ps xmm1,xmm1
  cvtdq2ps xmm3,xmm3
  mulss xmm3, dword ptr [enemydmg_multiplier]
  mulss xmm1, dword ptr [enemydmg_multiplier]
  jmp dmg_return

dmg_code:
  movd xmm3,[rcx+04]
  movd xmm1,[rcx+08]
  cvtdq2ps xmm1,xmm1
  cvtdq2ps xmm3,xmm3
  jmp dmg_return

triple_dmg:
  dd (float)3  // edit this for times x base damage (1 is default)

double_dmg:
  dd (float)2  // edit this for times x base damage (1 is default)

machinegun_dmg_multiplier:
  dd (float)1.5  // edit this for times x base damage (1 is default)

dmg_multiplier_oneshot:
  dd (float)20  // edit this for times x base damage (1 is default)

dmg_multiplier_fall:
  dd (float)0.1  // edit this for times x base damage (1 is default)

admg_multiplier_fall:
  dd (float)0.0  // edit this for times x base damage (1 is default)

armordmg_multiplier:
  dd (float)2  // edit this for times x armor/limb damage (1 is default)

armordmg_default:
  dd (float)1  // edit this for times x armor/limb damage (1 is default)

enemydmg_multiplier:
  dd (float)0.75  // edit this for times x enemy damage (1 is default)

dmg_limit:
  dd (float)7000 // limit the super damage to prevent creating weapons that would outdamage inf health

dmg_toggle_enemyORdefault:
  dd #1


damageMulti:
  jmp far dmg_newmem
  nop 2
dmg_return:

registersymbol(damageMulti)
registersymbol(dmg_toggle_enemyORdefault)


[DISABLE]

damageMulti:
  db 66 0F 6E 59 04 66 0F 6E 49 08 0F 5B C9 0F 5B DB

unregistersymbol(damageMulti)
unregistersymbol(dmg_toggle_enemyORdefault)
dealloc(dmg_newmem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>117436</ID>
              <Description>"unknown weapon ID = enemy / default"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">1:enemy
0:default
</DropDownList>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>dmg_toggle_enemyORdefault</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>117485</ID>
      <Description>"EasyAccessScripts"</Description>
      <Options moHideChildren="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>138</ID>
          <Description>"OnClick Armory Weapon Editor                                            (by cfemen)"</Description>
          <Options moHideChildren="1"/>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : helldivers2.exe
  Version: 
  Date   : 2024-03-21
  Author : cfe

  This script does blah blah blah
}

[ENABLE]
globalalloc(fSpeed,4)
fSpeed:
dd (float)2
globalalloc(pWeapon,8)
pWeapon:
dq 0
globalalloc(pFirerate,8)
pFirerate:
dq 0

aobscanmodule(aobReadWeapon3,game.dll,66 0F 6E 40 04 4D 8B C6 41 8B 57 0C 0F 5B C0) // should be unique
alloc(newmem4,$1000)

label(code4)
label(return4)

newmem4:

code4:
  push rbx
  mov rbx,pWeapon
  mov [rbx],rax
  pop rbx
  movd xmm0,[rax+04]
  mov r8,r14
  mov edx,[r15+0C]
  cvtdq2ps xmm0,xmm0
  jmp return4

aobReadWeapon3:
  jmp far newmem4
  nop
return4:
registersymbol(aobReadWeapon3)

aobscanmodule(aobBlitzerFire,game.dll,0F 10 48 10 48 8D 8D B0 00 00 00 0F 29 85 B0 00 00 00) // should be unique
alloc(newmem5,$1000)

label(code5)
label(return5)

newmem5:

code5:
  push rbx
  push rcx
  mov rbx,pFirerate
  lea rcx,[rax-4]
  mov [rbx],rcx
  pop rcx
  pop rbx
  movups xmm1,[rax+10]
  lea rcx,[rbp+000000B0]
  movaps [rbp+000000B0],xmm0
  jmp return5

aobBlitzerFire:
  jmp far newmem5
  nop 4
return5:
registersymbol(aobBlitzerFire)

aobscanmodule(aobBlitzerDamage,game.dll,44 8B 7A 24 49 8B D6 66 0F 6E 70 04 0F 5B F6) // should be unique
alloc(newmem6,$1000)

label(code6)
label(return6)

newmem6:

code6:
  push rbx
  mov rbx,pWeapon
  mov [rbx],rax
  pop rbx
  mov r15d,[rdx+24]
  mov rdx,r14
  movd xmm6,[rax+04]
  cvtdq2ps xmm6,xmm6
  jmp return6

aobBlitzerDamage:
  jmp far newmem6
  nop
return6:
registersymbol(aobBlitzerDamage)


aobscanmodule(aobFireRate,game.dll,48 8D 80 80 00 00 00 0F 11 41 80 0F 10 40 A0 0F 11 49 90 0F 10 48 B0 0F 11 41 A0 0F 10 40 C0 0F 11 49 B0 0F 10 48 D0 0F 11 41 C0 0F 10 40 E0 0F 11 49 D0 0F 10 48 F0 0F 11 41 E0 0F 11 49 F0 49 2B D5 75 AE 0F 10 00 0F 10 48 10 0F 11 01 0F 10 40 20 0F 11 49 10 0F 10 48 30 0F 11 41 20 0F 10 40 40 0F 11 49 30 0F 10 48 50) // should be unique
alloc(newmem7,$1000)

label(code7)
label(return7)

newmem7:

code7:
  push rbx
  mov ebx,[rax+8]
  test ebx,ebx
  je short @f
   mov rbx,pFirerate
   mov [rbx],rax
  @@:
  pop rbx
  lea rax,[rax+00000080]
  movups [rcx-80],xmm0
  movups xmm0,[rax-60]
  jmp return7

aobFireRate:
  jmp far newmem7
  nop
return7:
registersymbol(aobFireRate)


aobscanmodule(aobReadDMG,game.dll,F3 44 0F 10 8D F8 01 00 00 4D 8B C6 66 0F 6E 40 04) // should be unique
alloc(newmem8,$1000)

label(code8)
label(return8)

newmem8:

code8:
  push rbx
  mov rbx,pWeapon
  mov [rbx],rax
  pop rbx
  movss xmm9,[rbp+000001F8]
  mov r8,r14
  movd xmm0,[rax+04]
  jmp return8

aobReadDMG:
  jmp far newmem8
  nop 3
return8:
registersymbol(aobReadDMG)

aobscanmodule(aobDamageSpecial,game.dll,F3 44 0F 10 B5 F8 01 00 00 4D 8B C6 66 0F 6E 40 04) // should be unique
alloc(newmem9,$1000)

label(code9)
label(return9)

newmem9:

code9:
  push rbx
  mov rbx,pWeapon
  mov [rbx],rax
  pop rbx
  movss xmm14,[rbp+000001F8]
  mov r8,r14
  movd xmm0,[rax+04]
  jmp return9

aobDamageSpecial:
  jmp far newmem9
  nop 3
return9:
registersymbol(aobDamageSpecial)

aobscanmodule(aobReadSpecialDamage,game.dll,45 8B C4 0F 28 C7 66 0F 6E 70 04 0F 5B F6) // should be unique
alloc(newmem10,$1000)

label(code10)
label(return10)

newmem10:

code10:
  mov r8,pWeapon
  mov [r8],rax
  mov r8d,r12d
  movaps xmm0,xmm7
  movd xmm6,[rax+04]
  cvtdq2ps xmm6,xmm6
  jmp return10

aobReadSpecialDamage:
  jmp far newmem10
return10:
registersymbol(aobReadSpecialDamage)

[DISABLE]



aobReadWeapon3:
  db 66 0F 6E 40 04 4D 8B C6 41 8B 57 0C 0F 5B C0

unregistersymbol(aobReadWeapon3)
dealloc(newmem4)


aobBlitzerFire:
  db 0F 10 48 10 48 8D 8D B0 00 00 00 0F 29 85 B0 00 00 00

unregistersymbol(aobBlitzerFire)
dealloc(newmem5)

aobBlitzerDamage:
  db 44 8B 7A 24 49 8B D6 66 0F 6E 70 04 0F 5B F6

unregistersymbol(aobBlitzerDamage)
dealloc(newmem6)



{
// ORIGINAL CODE - INJECTION POINT: game.dll+CFDA33

game.dll+CFDA0A: 8B 85 F0 00 00 00        - mov eax,[rbp+000000F0]
game.dll+CFDA10: 48 89 54 24 60           - mov [rsp+60],rdx
game.dll+CFDA15: 85 C0                    - test eax,eax
game.dll+CFDA17: 74 08                    - je game.dll+CFDA21
game.dll+CFDA19: 4D 8B AC C0 70 FD C9 01  - mov r13,[r8+rax*8+01C9FD70]
game.dll+CFDA21: 8B 4A 3C                 - mov ecx,[rdx+3C]
game.dll+CFDA24: 49 8B C6                 - mov rax,r14
game.dll+CFDA27: 85 C9                    - test ecx,ecx
game.dll+CFDA29: 74 08                    - je game.dll+CFDA33
game.dll+CFDA2B: 49 8B 84 C8 80 F0 C9 01  - mov rax,[r8+rcx*8+01C9F080]
// ---------- INJECTING HERE ----------
game.dll+CFDA33: 41 8B 7D 3C              - mov edi,[r13+3C]
// ---------- DONE INJECTING  ----------
game.dll+CFDA37: 49 8B D6                 - mov rdx,r14
game.dll+CFDA3A: 66 0F 6E 70 04           - movd xmm6,[rax+04]
game.dll+CFDA3F: 0F 5B F6                 - cvtdq2ps xmm6,xmm6
game.dll+CFDA42: 85 FF                    - test edi,edi
game.dll+CFDA44: 74 08                    - je game.dll+CFDA4E
game.dll+CFDA46: 49 8B 94 F8 80 F0 C9 01  - mov rdx,[r8+rdi*8+01C9F080]
game.dll+CFDA4E: 49 8B C6                 - mov rax,r14
game.dll+CFDA51: 85 C9                    - test ecx,ecx
game.dll+CFDA53: 74 08                    - je game.dll+CFDA5D
game.dll+CFDA55: 49 8B 84 C8 80 F0 C9 01  - mov rax,[r8+rcx*8+01C9F080]
}
aobFireRate:
  db 48 8D 80 80 00 00 00 0F 11 41 80 0F 10 40 A0

unregistersymbol(aobFireRate)
dealloc(newmem7)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+D04C9E

game.dll+D04C6B: 45 0F 57 C0                       - xorps xmm8,xmm8
game.dll+D04C6F: 4D 85 DB                          - test r11,r11
game.dll+D04C72: 0F 84 35 2B 00 00                 - je game.dll+D077AD
game.dll+D04C78: 49 8B C3                          - mov rax,r11
game.dll+D04C7B: 48 8D 8D F0 01 00 00              - lea rcx,[rbp+000001F0]
game.dll+D04C82: 41 8B D4                          - mov edx,r12d
game.dll+D04C85: 66 66 66 0F 1F 84 00 00 00 00 00  - nop word ptr [rax+rax+00000000]
game.dll+D04C90: 48 8D 89 80 00 00 00              - lea rcx,[rcx+00000080]
game.dll+D04C97: 0F 10 00                          - movups xmm0,[rax]
game.dll+D04C9A: 0F 10 48 10                       - movups xmm1,[rax+10]
// ---------- INJECTING HERE ----------
game.dll+D04C9E: 48 8D 80 80 00 00 00              - lea rax,[rax+00000080]
// ---------- DONE INJECTING  ----------
game.dll+D04CA5: 0F 11 41 80                       - movups [rcx-80],xmm0
game.dll+D04CA9: 0F 10 40 A0                       - movups xmm0,[rax-60]
game.dll+D04CAD: 0F 11 49 90                       - movups [rcx-70],xmm1
game.dll+D04CB1: 0F 10 48 B0                       - movups xmm1,[rax-50]
game.dll+D04CB5: 0F 11 41 A0                       - movups [rcx-60],xmm0
game.dll+D04CB9: 0F 10 40 C0                       - movups xmm0,[rax-40]
game.dll+D04CBD: 0F 11 49 B0                       - movups [rcx-50],xmm1
game.dll+D04CC1: 0F 10 48 D0                       - movups xmm1,[rax-30]
game.dll+D04CC5: 0F 11 41 C0                       - movups [rcx-40],xmm0
game.dll+D04CC9: 0F 10 40 E0                       - movups xmm0,[rax-20]
}
aobReadDMG:
  db F3 44 0F 10 8D F8 01 00 00 4D 8B C6 66 0F 6E 40 04

unregistersymbol(aobReadDMG)
dealloc(newmem8)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+D06A0C

game.dll+D069E3: 8B 85 90 05 00 00           - mov eax,[rbp+00000590]
game.dll+D069E9: 85 C0                       - test eax,eax
game.dll+D069EB: 74 08                       - je game.dll+D069F5
game.dll+D069ED: 4D 8B BC C1 80 7D CA 01     - mov r15,[r9+rax*8+01CA7D80]
game.dll+D069F5: 8B 4F 3C                    - mov ecx,[rdi+3C]
game.dll+D069F8: 49 8B C6                    - mov rax,r14
game.dll+D069FB: 44 89 64 24 20              - mov [rsp+20],r12d
game.dll+D06A00: 85 C9                       - test ecx,ecx
game.dll+D06A02: 74 08                       - je game.dll+D06A0C
game.dll+D06A04: 49 8B 84 C9 90 70 CA 01     - mov rax,[r9+rcx*8+01CA7090]
// ---------- INJECTING HERE ----------
game.dll+D06A0C: F3 44 0F 10 8D F8 01 00 00  - movss xmm9,[rbp+000001F8]
// ---------- DONE INJECTING  ----------
game.dll+D06A15: 4D 8B C6                    - mov r8,r14
game.dll+D06A18: 66 0F 6E 40 04              - movd xmm0,[rax+04]
game.dll+D06A1D: 41 0F 28 C9                 - movaps xmm1,xmm9
game.dll+D06A21: 41 8B 57 3C                 - mov edx,[r15+3C]
game.dll+D06A25: F3 44 0F 11 4C 24 50        - movss [rsp+50],xmm9
game.dll+D06A2C: F3 41 0F 5E CA              - divss xmm1,xmm10
game.dll+D06A31: 0F 5B C0                    - cvtdq2ps xmm0,xmm0
game.dll+D06A34: F3 0F 59 C1                 - mulss xmm0,xmm1
game.dll+D06A38: F3 0F 11 44 24 24           - movss [rsp+24],xmm0
game.dll+D06A3E: 85 D2                       - test edx,edx
}
aobDamageSpecial:
  db F3 44 0F 10 B5 F8 01 00 00 4D 8B C6 66 0F 6E 40 04

unregistersymbol(aobDamageSpecial)
dealloc(newmem9)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+D04F27

game.dll+D04EFD: 8B 85 F0 00 00 00           - mov eax,[rbp+000000F0]
game.dll+D04F03: 85 C0                       - test eax,eax
game.dll+D04F05: 74 08                       - je game.dll+D04F0F
game.dll+D04F07: 49 8B BC C1 80 7D CA 01     - mov rdi,[r9+rax*8+01CA7D80]
game.dll+D04F0F: 41 8B 4D 3C                 - mov ecx,[r13+3C]
game.dll+D04F13: 49 8B C6                    - mov rax,r14
game.dll+D04F16: 44 89 64 24 20              - mov [rsp+20],r12d
game.dll+D04F1B: 85 C9                       - test ecx,ecx
game.dll+D04F1D: 74 08                       - je game.dll+D04F27
game.dll+D04F1F: 49 8B 84 C9 90 70 CA 01     - mov rax,[r9+rcx*8+01CA7090]
// ---------- INJECTING HERE ----------
game.dll+D04F27: F3 44 0F 10 B5 F8 01 00 00  - movss xmm14,[rbp+000001F8]
// ---------- DONE INJECTING  ----------
game.dll+D04F30: 4D 8B C6                    - mov r8,r14
game.dll+D04F33: 66 0F 6E 40 04              - movd xmm0,[rax+04]
game.dll+D04F38: 41 0F 28 CE                 - movaps xmm1,xmm14
game.dll+D04F3C: 8B 57 3C                    - mov edx,[rdi+3C]
game.dll+D04F3F: F3 44 0F 11 74 24 4C        - movss [rsp+4C],xmm14
game.dll+D04F46: F3 41 0F 5E CA              - divss xmm1,xmm10
game.dll+D04F4B: 0F 5B C0                    - cvtdq2ps xmm0,xmm0
game.dll+D04F4E: F3 0F 59 C1                 - mulss xmm0,xmm1
game.dll+D04F52: F3 0F 11 44 24 24           - movss [rsp+24],xmm0
game.dll+D04F58: 85 D2                       - test edx,edx
}
aobReadSpecialDamage:
  db 45 8B C4 0F 28 C7 66 0F 6E 70 04 0F 5B F6

unregistersymbol(aobReadSpecialDamage)
dealloc(newmem10)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+E1E082

game.dll+E1E051: E8 9A C0 FF FF           - call game.dll+E1A0F0
game.dll+E1E056: 83 FF 2E                 - cmp edi,2E
game.dll+E1E059: 0F 83 F1 2A 00 00        - jae game.dll+E20B50
game.dll+E1E05F: 8B 4D 38                 - mov ecx,[rbp+38]
game.dll+E1E062: E8 C9 B0 E0 FF           - call game.dll+C29130
game.dll+E1E067: 8B 8D 78 01 00 00        - mov ecx,[rbp+00000178]
game.dll+E1E06D: 66 0F 6E 78 04           - movd xmm7,[rax+04]
game.dll+E1E072: 0F 5B FF                 - cvtdq2ps xmm7,xmm7
game.dll+E1E075: F3 0F 59 3D CF 90 38 00  - mulss xmm7,[game.dll+11A714C]
game.dll+E1E07D: E8 AE B0 E0 FF           - call game.dll+C29130
// ---------- INJECTING HERE ----------
game.dll+E1E082: 45 8B C4                 - mov r8d,r12d
// ---------- DONE INJECTING  ----------
game.dll+E1E085: 0F 28 C7                 - movaps xmm0,xmm7
game.dll+E1E088: 66 0F 6E 70 04           - movd xmm6,[rax+04]
game.dll+E1E08D: 0F 5B F6                 - cvtdq2ps xmm6,xmm6
game.dll+E1E090: F3 0F 59 35 B4 90 38 00  - mulss xmm6,[game.dll+11A714C]
game.dll+E1E098: 0F 28 CE                 - movaps xmm1,xmm6
game.dll+E1E09B: E8 90 85 FC FF           - call game.dll+DE6630
game.dll+E1E0A0: 45 33 DB                 - xor r11d,r11d
game.dll+E1E0A3: 8B CF                    - mov ecx,edi
game.dll+E1E0A5: 48 6B D1 1C              - imul rdx,rcx,1C
game.dll+E1E0A9: FF C7                    - inc edi
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>139</ID>
              <Description>"Firerate:"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>pFirerate</Address>
              <Offsets>
                <Offset>8</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>140</ID>
              <Description>"Damage:"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>pWeapon</Address>
              <Offsets>
                <Offset>4</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>141</ID>
              <Description>"Structure Penetration"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>pWeapon</Address>
              <Offsets>
                <Offset>8</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>142</ID>
              <Description>"Penetration (No Angle)"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>pWeapon</Address>
              <Offsets>
                <Offset>C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>143</ID>
              <Description>"Penetration (Angle)"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>pWeapon</Address>
              <Offsets>
                <Offset>10</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>144</ID>
              <Description>"Demolition"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>pWeapon</Address>
              <Offsets>
                <Offset>1C</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>117432</ID>
          <Description>"No bullets consume                                                               (by cfemen)"</Description>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]

aobscanmodule(aobReload,game.dll,44 89 74 01 04 4D 8B 42 50 49 8B 42 38) // should be unique
registersymbol(aobReload)
aobReload:
  nop 5
[DISABLE]

aobReload:
 db 44 89 74 01 04

unregistersymbol(aobReload)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>117439</ID>
          <Description>"Temp Unlock Armor, Weapons, Strategems                          (by cfemen)"</Description>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]

// stragem:
aobscanmodule(aobUnlock1,game.dll,48 89 5C 24 08 48 8B D9 85 D2 75 09)
registersymbol(aobUnlock1)

// weapon:
aobscanmodule(aobUnlock2,game.dll,83 B9 ?? ?? ?? ?? ?? 76 ?? 85 D2 74 ?? 44 8B 89 ?? ?? ?? ?? 45 33 C0 45 85 C9 74 ?? 48 8D 81 ?? ?? ?? ?? 39 50 ?? 74 ?? 41 FF C0 48 83 C0 18 45 3B C1 72 ?? 32 C0 C3 8B 00 48 69 C8 B8 00 00 00)
registersymbol(aobUnlock2)

// armor:
aobscanmodule(aobUnlock3,game.dll,48 83 EC 08 44 8B 49 04 45 33 C0 8B 01)
registersymbol(aobUnlock3)

aobUnlock1:
  db b0 01 c3

aobUnlock2:
  db b0 01 c3

aobUnlock3:
  db b0 01 c3

[DISABLE]


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>117532</ID>
          <Description>"Inf last mag                                                                           (by gir489)"</Description>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_SubtractAmmo,game.dll,8B D7 4C 8D 04 52 42 83 2C 81 01 48 8B 45)
registersymbol(aob_SubtractAmmo)
alloc(newmem_SubtractAmmo,1024)
label(return_SubtractAmmo)

newmem_SubtractAmmo:
  mov edx,edi
  lea r8,[rdx+rdx*2]
  cmp [rcx+r8*4], #2
  jle short @f
    sub [rcx+r8*4], #1
  @@:
  mov rax,[rbp+38]
  jmp return_SubtractAmmo

aob_SubtractAmmo:
  jmp far newmem_SubtractAmmo
  nop
return_SubtractAmmo:

[DISABLE]
aob_SubtractAmmo:
  db 8B D7 4C 8D 04 52 42 83 2C 81 01 48 8B 45 38

unregistersymbol(aob_SubtractAmmo)
dealloc(newmem_SubtractAmmo)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>117477</ID>
          <Description>"Instant drop                                                                           (by fallout11)"</Description>
          <Color>60ACDF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
aobscanmodule(instantstratdrop,game.dll,F3 0F 11 04 06 48 8B 47 60 4C 8B 47 78 4C 03 C6 4A 8B 0C F8) // should be unique
alloc(newmem,$1000,instantstratdrop)
alloc(stratMax,8)

registersymbol(stratMax)

label(code)
label(return)

stratMax:
dd (float)0.1

newmem:
  push edx
  movd edx,xmm0
  cmp edx,[stratMax]
  jle code
  mov edx,[stratMax]
  movd xmm0,edx
code:
  pop edx
  movss [rsi+rax],xmm0
  jmp return

instantstratdrop:
  jmp newmem
return:
registersymbol(instantstratdrop)

[DISABLE]

instantstratdrop:
  db F3 0F 11 04 06 48 8B 47 60 4C 8B 47 78 4C 03 C6 4A 8B 0C F0

unregistersymbol(stratMax)
unregistersymbol(instantstratdrop)
dealloc(stratMax)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>117483</ID>
          <Description>"100% Democracy (armor passive)                                         (by Dottie)"</Description>
          <Color>000000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
{$lua}
local democracy_protects = getAddress("[[game.dll + 1CFF7C8] + B0] + 1C") + 0x400
writeFloat(democracy_protects, 2.0)

[DISABLE]
{$lua}
local democracy_protects = getAddress("[[game.dll + 1CFF7C8] + B0] + 1C") + 0x400
writeFloat(democracy_protects, 1.5)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>117484</ID>
          <Description>"No fall damage                                                                      (by impushingp)"</Description>
          <Color>C080FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_No_Fall,game.dll,4C 8B DC 55 53 41 56 49 8D AB D8)
registersymbol(aob_No_Fall)
alloc(newmem_No_Fall,1024,game.dll)
label(return_No_Fall)
alloc(base_attackID,8)

registersymbol(base_attackID)

newmem_No_Fall:
  mov [base_attackID],rsp
  push rbx
  mov rbx,[base_attackID]
  lea rbx,[rbx-A28]
  mov rbx,[rbx+00000AA8]
  cmp ebx,E32E9832
  pop rbx
  jne @f
      ret
  @@:
  mov r11,rsp
  push rbp
  push rbx
  jmp return_No_Fall

aob_No_Fall:
  jmp newmem_No_Fall
return_No_Fall:

[DISABLE]
aob_No_Fall:
  db 4C 8B DC 55 53

unregistersymbol(aob_No_Fall)
dealloc(newmem_No_Fall)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113961</ID>
          <Description>"Energy Shield Mod (edit your cd)(outdated)                                          (by gir489)"</Description>
          <Color>0080FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.20424.0
// MD5 Signature     : 714FB37A355B892081B500B0148D8A2B
// EXE Compile Date  : June 05, 2024 09:54 AM
// Script Date       : June 14, 2024 09:00 PM
[ENABLE]
aobscanmodule(aob_ShielDeezNutts,game.dll,F3 41 0F 5C CE F3 43 0F 11 4C 3E)
registersymbol(aob_ShielDeezNutts)
alloc(ShieldDeezNutts,1024,game.dll)
label(ShieldDeezNutts_return)

ShieldDeezNutts:
  test rsi,rsi
  je short @f
  push rax
  mov rax,12C8D71AC3897A5C
  cmp [rsi],rax
  jne short @f
  comiss xmm1, dword ptr [compare_shield]
  jbe short @f
    movss xmm1, dword ptr [compare_shield]
@@:
  pop rax
  subss xmm1,xmm14
  movss [r14+r15+4C],xmm1
  movaps xmm2, xmm1
  jmp ShieldDeezNutts_return
compare_shield:
dd (float)5.0  // maximum shield cooldown duration in seconds

aob_ShielDeezNutts:
  jmp far ShieldDeezNutts
  nop
ShieldDeezNutts_return:

[DISABLE]
dealloc(ShieldDeezNutts)
unregistersymbol(aob_ShielDeezNutts)

aob_ShielDeezNutts:
  db F3 41 0F 5C CE F3 43 0F 11 4C 3E 4C 0F 28 D1
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>117486</ID>
          <Description>"No ragdoll(outdated)                                                                             (by Rei)"</Description>
          <Color>0080FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]

aobscanmodule(ragdoll,game.dll,40 57 48 83 EC ? 3B 15 ? ? ? ? 41 8B F8 4C 89 7C 24) // should be unique
alloc(newmem,$1000,ragdoll)

label(code)
label(return)

newmem:
  mov eax,1
  ret
code:
  push rdi
  sub rsp,30
  jmp return

ragdoll:
  jmp newmem
  nop
return:
registersymbol(ragdoll)

[DISABLE]

ragdoll:
  db 40 57 48 83 EC 30

unregistersymbol(ragdoll)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>117481</ID>
          <Description>"Customize Seaf(outdated)                                                                      (by sakuno)"</Description>
          <Color>0080FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
{
  Alias      : 𝗦𝗘𝗔𝗙𝗦𝗵𝗲𝗹𝗹𝗥𝗮𝗰𝗸𝗠𝗼𝗱
  Game       : Helldiver 2
  Version    : any game version
  Date       : 2024-10-05
  Author     : (Discord)Sakuno

  Function: Increasing SEAF Artillery shell spawn chance/count.
}
{$lua}
function ObjectiveShellRackDataReplacer()
  gObjectiveShellRackAddr=AOBScan("00 00 C0 3F 07 00 00 00 01", '-W')
    if (gObjectiveShellRackAddr == nil or gObjectiveShellRackAddr.Count &gt; 1) then
       return
    end
    registerSymbol("ObjectiveShellRackAddr", gObjectiveShellRackAddr[0])
  gObjectiveShellRackAddr.destroy()
end
ObjectiveShellRackDataReplacer()

{$asm}

ObjectiveShellRackAddr+4:
  dd #30

[DISABLE]

ObjectiveShellRackAddr+4:
  dd #7
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>117459</ID>
          <Description>"Mortar_Proj_Mod(outdated)                                                                   (by sakuno+fallout11)"</Description>
          <Options moHideChildren="1"/>
          <Color>0080FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
registerSymbol("Mortar_40mm_HE_nproj", '["game.dll" + 02114950] + 3F1C')
registerSymbol("Mortar_40mm_HE_expls", '["game.dll" + 02114950] + 3F90')
{$asm}

//A/M-12 MORTAR SENTRY
Mortar_40mm_HE_nproj: //num_projectiles
  dd #1 //1
Mortar_40mm_HE_expls: //explosion_type_on_impact (explosive ID)
  dd #27 //(27=SEAF Explosive) (185=SEAF High Yield) (190=SEAF Mininuke)

[DISABLE]
Mortar_40mm_HE_nproj:
  dd #1
Mortar_40mm_HE_expls:
  dd #238 //(238=Regular 40mm Mortar round)
unregisterSymbol(Mortar_40mm_HE_nproj)
unregisterSymbol(Mortar_40mm_HE_expls)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1</ID>
              <Description>" (default = 1)"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>Mortar_40mm_HE</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>117474</ID>
          <Description>"Electrical scripts(outdated)"</Description>
          <Options moHideChildren="1"/>
          <Color>0080FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
{
  Game    : helldivers2.exe
  Version : 1.001.201
  Date    : 2024-10-29
  Original Author : (CFEMEN's Discord) Sakuno
  Modifications by  : MIAUSISI

  &gt; ARC WEAPONS MODIFICATIONS:
  --------------------------
  - Script contains modification to the following weapons:
    - ARC-3 Arc Thrower
    - ARC-12 Blitzer
    - A/ARC-3 Tesla Tower
  - As of 11/10/24, it modifies the following properties:
    - RayCount
    - ChainCount
    - Main Range
    - Target Scan Angle 1
    - Target Scan Angle 2
    - Chain Target Scan Degree
    - Target Scan Window Size
}
{$lua}
registerSymbol("damage_anchor_address",  '[game.dll + 02090B18]')
registerSymbol("arcwpn_anchor_address",  '[game.dll + 020909D0]')
registerSymbol("unk000_anchor_address", '[[game.dll + 01A34E28] + A0] + 1C')
{$asm}
[DISABLE]
unregisterSymbol("damage_anchor_address")
unregisterSymbol("arcwpn_anchor_address")
unregisterSymbol("unk000_anchor_address")
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>117467</ID>
              <Description>"Higher spread ratio(outdated)                                                              (by sakuno+Meausisi)"</Description>
              <Options moHideChildren="1"/>
              <Color>0080FF</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>117466</ID>
                  <Description>"ARC-12 Blitzer                                                                  (by Meausisi)"</Description>
                  <Color>00FFFF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{
  Game    : helldivers2.exe
  Version : 1.001.201
  Date    : 2024-10-29
  Original Author : (CFEMEN's Discord) Sakuno
  Modifications by  : MIAUSISI

  &gt; ARC-12 Blitzer modifications.
}
{$lua}
-- Assigns weapon addresses to fixed variables
registerSymbol("blitzer_settings", 'arcwpn_anchor_address + 0180')
registerSymbol("blitzer_damage",   'damage_anchor_address + 4C*81')

{$asm}
//! ========================================================
//! ===================== B L I T Z E R ====================
//! ========================================================

//! ===================== RAY SETTINGS =====================
blitzer_settings + 004: // Speed
  dd (float)850 //300
blitzer_settings + 008: // Distance
  dd (float)90 //25
blitzer_settings + 00C: //distance_at_max_angle_spread
  dd (float)15 //10
blitzer_settings + 010: //distance_at_max_angle_spread_first_shot
  dd (float)15 //10
blitzer_settings + 014: //max_angle_spread
  dd (float)35 //10
blitzer_settings + 018: //max_angle_spread_first_shot
  dd (float)35 //10
blitzer_settings + 01C: //max_chain_length
  dd #3
blitzer_settings + 020: //max_chain_split
  dd #3

//! =================== DAMAGE SETTINGS ====================
blitzer_damage + 004:
  dd #120
blitzer_damage + 008:
  dd #120
blitzer_damage + 00C:
  dd #7
blitzer_damage + 010:
  dd #7
blitzer_damage + 014:
  dd #7
blitzer_damage + 018:
  dd #7
blitzer_damage + 01C:
  dd #20
blitzer_damage + 020:
  dd #55
blitzer_damage + 024:
  dd #35
blitzer_damage + 028:
  dd #2
blitzer_damage + 02C:
  dd #37
blitzer_damage + 030:
  dd (float)20

[DISABLE]

blitzer_settings + 004:
  dd (float)300
blitzer_settings + 008:
  dd (float)25
blitzer_settings + 00C:
  dd (float)10
blitzer_settings + 010:
  dd (float)10
blitzer_settings + 014:
  dd (float)10
blitzer_settings + 018:
  dd (float)10
blitzer_settings + 01C:
  dd #1
blitzer_settings + 020:
  dd #0

blitzer_damage + 004:
  dd #50
blitzer_damage + 008:
  dd #35
blitzer_damage + 00C:
  dd #3
blitzer_damage + 010:
  dd #3
blitzer_damage + 014:
  dd #3
blitzer_damage + 018:
  dd #0
blitzer_damage + 01C:
  dd #10
blitzer_damage + 020:
  dd #30
blitzer_damage + 024:
  dd #25
blitzer_damage + 028:
  dd #2
blitzer_damage + 02C:
  dd #37
blitzer_damage + 030:
  dd (float)0.7

unregisterSymbol("blitzer_settings")
unregisterSymbol("blitzer_damage")
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>117469</ID>
                  <Description>"ARC-3 Arc Thrower                                                          (by Meausisi)"</Description>
                  <Color>00FFFF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{
  Game    : helldivers2.exe
  Version : 1.001.201
  Date    : 2024-10-29
  Original Author : (CFEMEN's Discord) Sakuno
  Corrections by  : MIAUSISI

  &gt; ARC Thrower Modifications.
}
{$lua}
-- Assigns weapon addresses to fixed variables
registerSymbol("arcthrower_settings", 'arcwpn_anchor_address + 0000')
registerSymbol("arcthrower_damage",   'damage_anchor_address + 4C*7F')

{$asm}

//! ========================================================
//! =============== A R C      T H R O W E R ===============
//! ========================================================

//! ===================== RAY SETTINGS =====================
arcthrower_settings + 004: // Speed
  dd (float)850 //300
arcthrower_settings + 008: // Distance
  dd (float)90 //55
arcthrower_settings + 00C: //distance_at_max_angle_spread
  dd (float)45 //40
arcthrower_settings + 010: //distance_at_max_angle_spread_first_shot
  dd (float)45 //40
arcthrower_settings + 014: //max_angle_spread
  dd (float)66 //60
arcthrower_settings + 018: //max_angle_spread_first_shot
  dd (float)6 //3
arcthrower_settings + 01C: //max_chain_split
  dd #3 //1
arcthrower_settings + 020: //max_chain_length
  dd #3 //1

//! =================== DAMAGE SETTINGS ====================
arcthrower_damage + 004:
  dd #350
arcthrower_damage + 008:
  dd #300
arcthrower_damage + 00C:
  dd #7
arcthrower_damage + 010:
  dd #7
arcthrower_damage + 014:
  dd #7
arcthrower_damage + 018:
  dd #7
arcthrower_damage + 01C:
  dd #20
arcthrower_damage + 020:
  dd #55
arcthrower_damage + 024:
  dd #10
arcthrower_damage + 028:
  dd #2
arcthrower_damage + 02C:
  dd #37
arcthrower_damage + 030:
  dd (float)20

[DISABLE]
arcthrower_settings + 004:
  dd (float)300
arcthrower_settings + 008:
  dd (float)55
arcthrower_settings + 00C:
  dd (float)40
arcthrower_settings + 010:
  dd (float)40
arcthrower_settings + 014:
  dd (float)60
arcthrower_settings + 018:
  dd (float)3
arcthrower_settings + 01C:
  dd #1
arcthrower_settings + 020:
  dd #1

arcthrower_damage + 004:
  dd #250
arcthrower_damage + 008:
  dd #100
arcthrower_damage + 00C:
  dd #7
arcthrower_damage + 010:
  dd #7
arcthrower_damage + 014:
  dd #7
arcthrower_damage + 018:
  dd #0
arcthrower_damage + 01C:
  dd #20
arcthrower_damage + 020:
  dd #35
arcthrower_damage + 024:
  dd #10
arcthrower_damage + 028:
  dd #2
arcthrower_damage + 02C:
  dd #37
arcthrower_damage + 030:
  dd (float)8

unregisterSymbol("arcthrower_settings")
unregisterSymbol("arcthrower_damage")

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>117470</ID>
                  <Description>"A/ARC-3 Tesla Tower                                                       (by Meausisi)"</Description>
                  <Color>00FFFF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">[ENABLE]
{
  Game    : helldivers2.exe
  Version : 1.001.101
  Date    : 2024-10-11
  Original Author : (CFEMEN's Discord) Sakuno
  Modifications by  : MIAUSISI

  &gt; ARC WEAPONS MODIFICATIONS:
  --------------------------
  - Script modifies A/ARC-3 Tesla Tower RAY properties:
    - Speed
    - Distance
    - Distance at Max Angle Spread
    - Distance at Max Angle Spread First Shot
    - Max Angle Spread
    - Max Angle Spread First Shot
    - Max Chain Length
    - Max Chain Split
  - Script modifies A/ARC-3 Tesla Tower DAMAGE properties:
    - Standard damage
    - Squishy damage
    - AP 1
    - AP 2
    - AP 3
    - AP 4
    - Demolition
    - Stagger
    - Momentum
    - Elemental Damage Type
    - Status Effect Type
    - Status Effect Duration
}
{$lua}
-- Assigns weapon addresses to fixed variables
registerSymbol("tesla_tower_settings", 'arcwpn_anchor_address + 01E0')
registerSymbol("tesla_tower_damage",   'damage_anchor_address + 4C*8A')

{$asm}
//! ========================================================
//! =================== T E S L A   T O W E R ==============
//! ========================================================

//! ===================== RAY SETTINGS =====================
tesla_tower_settings + 004: // Speed
  dd (float)3000
tesla_tower_settings + 008: // Distance
  dd (float)30
tesla_tower_settings + 00C: //distance_at_max_angle_spread
  dd (float)3
tesla_tower_settings + 010: //distance_at_max_angle_spread_first_shot
  dd (float)25
tesla_tower_settings + 014: //max_angle_spread
  dd (float)359
tesla_tower_settings + 018: //max_angle_spread_first_shot
  dd (float)180
tesla_tower_settings + 01C: //max_chain_length
  dd #4
tesla_tower_settings + 020: //max_chain_split
  dd #4

//! =================== DAMAGE SETTINGS ====================
tesla_tower_damage + 004:
  dd #750
tesla_tower_damage + 008:
  dd #750
tesla_tower_damage + 00C:
  dd #7
tesla_tower_damage + 010:
  dd #7
tesla_tower_damage + 014:
  dd #7
tesla_tower_damage + 018:
  dd #7
tesla_tower_damage + 01C:
  dd #20
tesla_tower_damage + 020:
  dd #35
tesla_tower_damage + 024:
  dd #10
tesla_tower_damage + 028:
  dd #2
tesla_tower_damage + 02C:
  dd #37
tesla_tower_damage + 030:
  dd (float)20

[DISABLE]

tesla_tower_settings + 004:
  dd (float)2000
tesla_tower_settings + 008:
  dd (float)20
tesla_tower_settings + 00C:
  dd (float)1
tesla_tower_settings + 010:
  dd (float)20
tesla_tower_settings + 014:
  dd (float)300
tesla_tower_settings + 018:
  dd (float)180
tesla_tower_settings + 01C:
  dd #2
tesla_tower_settings + 020:
  dd #2

tesla_tower_damage + 004:
  dd #600
tesla_tower_damage + 008:
  dd #600
tesla_tower_damage + 00C:
  dd #4
tesla_tower_damage + 010:
  dd #4
tesla_tower_damage + 014:
  dd #4
tesla_tower_damage + 018:
  dd #0
tesla_tower_damage + 01C:
  dd #20
tesla_tower_damage + 020:
  dd #35
tesla_tower_damage + 024:
  dd #10
tesla_tower_damage + 028:
  dd #2
tesla_tower_damage + 02C:
  dd #37
tesla_tower_damage + 030:
  dd (float)8

unregisterSymbol("tesla_tower_settings")
unregisterSymbol("tesla_tower_damage")
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>117468</ID>
              <Description>"100% Electrical conduit passive(outdated)                                           (by Meausisi)"</Description>
              <Color>4080FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.005
  Date   : 2024-10-10
  Author : MEOW-SEE-SEE (MIAUSISI)
  Many thanks to "That super cool Russian Guy" to help me
  with a faster way to look up the passive!

  &gt; IMPROVED ELECTRICAL CONDUIT
  -----------------------------
  - Sets resistance to ARC damage from 95% to 100%

}

{$lua}
registerSymbol('arc_resistance', 'unk000_anchor_address + 190')
{$asm}

arc_resistance + 38:
  dd (float)0.0
[DISABLE]

arc_resistance + 38:
  dd (float)0.05


unregistersymbol('arc_resistance')

</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>117475</ID>
          <Description>"500kg expanded radius(outdated)                                                         (by fallout11+Meowsisi)"</Description>
          <Options moHideChildren="1"/>
          <Color>0080FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
registerSymbol("eagle500kg_impact", '[game.dll + 022696B8] + B5C')
registerSymbol("eagle500kg_explosion", '[game.dll + 022696B8] + B68')
{$asm}

eagle500kg_impact: //explosion_type_on_impact
  dd #207 //

eagle500kg_explosion: //explosion_type_expire
  dd #207 // (207=SEAF Mininuke)

[DISABLE]
eagle500kg_impact: //explosion_type_on_impact
  dd #138 // (179=500kg impact)
//unregisterSymbol("eagle500kg_impact")

eagle500kg_explosion: //explosion_type_expire
  dd #198 //(198=500kg explosion)
unregisterSymbol("eagle500kg_explosion")
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <LuaScript>if not syntaxcheck then

  function cycleFullCompact( sender, force )
    local state = not( compactmenuitem.Caption == 'Compact View Mode' )
    if force ~= nil then
      state = not force
    end
    compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'
    getMainForm().Splitter1.Visible = state
    getMainForm().Panel4.Visible = state
    getMainForm().Panel5.Visible = state
  end

  function addCompactMenu()
    if compactmenualreadyexists then return end
      local parent = getMainForm().Menu.Items
      compactmenuitem = createMenuItem( parent )
      parent.add( compactmenuitem )
      compactmenuitem.Caption = 'Compact View Mode'
      compactmenuitem.OnClick = cycleFullCompact
      compactmenualreadyexists = 'yes'
  end

  addCompactMenu()
  cycleFullCompact( nil, true )


  function pushUpdate( sender, force )
    local state = not( updatemenuitem.Caption == 'Get Table Update' )
    if force ~= nil then
       state = not force
    end
    updatemenuitem.Caption = state and 'Get Table Update' or 'Get Table Update'
    if force == nil then
        local result = messageDialog('¿Do you want to check if there is a new version on GitHub?', mtConfirmation, mbYes, mbNo)
        if result == mrYes then
            shellExecute('https://github.com/prebombo/helldivers-2-CT/tree/main')
        end
    end
  end


  function addUpdateButton()
    if updatemenualreadyexists then return end
      local parent = getMainForm().Menu.Items
      updatemenuitem = createMenuItem( parent )
      parent.add( updatemenuitem )
      updatemenuitem.Caption = 'Get Table Update'
      updatemenuitem.OnClick = pushUpdate
      updatemenualreadyexists = 'yes'
  end

  addUpdateButton()
  pushUpdate( nil, true )


  function pushDocumentation( sender )
    shellExecute('https://docs.google.com/document/d/1FbxxnKTwDbqlnLpvSrEzOBdMFZYR-AApij6THXyc2_A/edit?usp=drive_link')
  end


  function addDocumentationButton()
    if documentationmenualreadyexists then return end
      local parent = getMainForm().Menu.Items
      documentationmenuitem = createMenuItem( parent )
      parent.add( documentationmenuitem )
      documentationmenuitem.Caption = 'Open Documentation'
      documentationmenuitem.OnClick = pushDocumentation
      documentationmenualreadyexists = 'yes'
  end

  addDocumentationButton()


  function pushBypass( sender )
    shellExecute('https://www.patreon.com/cfemen')
  end


  function addBypassButton()
    if bypassmenualreadyexists then return end
      local parent = getMainForm().Menu.Items
      bypassmenuitem = createMenuItem( parent )
      parent.add( bypassmenuitem )
      bypassmenuitem.Caption = 'Where can I get Bypass'
      bypassmenuitem.OnClick = pushBypass
      bypassmenualreadyexists = 'yes'
  end

  addBypassButton()

  --getMemoryViewForm().Visible = true
  getAutoAttachList().add("helldivers2.exe")

end


</LuaScript>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>"game.dll"+EDDBD7</Address>
      <Comment>hive
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"game.dll"+EDDC28</Address>
      <Comment>seen
</Comment>
    </DisassemblerComment>
  </DisassemblerComments>
</CheatTable>
